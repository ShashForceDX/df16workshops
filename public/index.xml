<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Salesforce Developers 2017</title>
    <link>http://www.sfdcworkshop.com/</link>
    <description>Recent content on Salesforce Developers 2017</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jul 2016 16:18:23 +0530</lastBuildDate>
    <atom:link href="http://www.sfdcworkshop.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Build a Battle Station Manager App using Lightning Components</title>
      <link>http://www.sfdcworkshop.com/workshop/battle-station/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/battle-station/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this project, you learn how to build an application using the Lightning Component framework for the Lightning Experience desktop UI and the Salesforce1 mobile app. We will build an app to manage the construction of Battle Stations on a single page. This is an extension of the &lt;a href=&#34;https://trailhead.salesforce.com/project/workshop-battle-station&#34; target=&#34;_blank&#34;&gt;Battle Station Trailhead project&lt;/a&gt;. However, you don&amp;rsquo;t have to necessarily complete the project before this workshop as you can install the metadata from the project using an unmanaged package.&lt;/p&gt;

&lt;p&gt;Once we are done with creating the App, it will look like this:
&lt;img src=&#34;images/appready2.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;h4 id=&#34;component-breakup&#34;&gt;Component breakup&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;BattleStationsList&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BattleStationItem&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BattleStationDetail&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ResourceList&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SupplyList&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StationRelatedLists&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;standard &lt;em&gt;Report Chart&lt;/em&gt; component&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You will use your Salesforce Developer Edition org for this workshop. If you don’t have a Developer Edition account, please &lt;a href=&#34;https://developer.salesforce.com/signup&#34; target=&#34;_blank&#34;&gt;Signup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You should have &lt;a href=&#34;https://help.salesforce.com/apex/HTViewHelpDoc?id=domain_name_setup.htm&#34; target=&#34;_blank&#34;&gt;My Domain&lt;/a&gt; enabled in your org and setup a domain to develop Lightning Components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;here-are-the-steps-involved-in-creating-our-app&#34;&gt;Here are the steps involved in creating our app:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step1&#34;&gt;Install the unmanaged package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step2&#34;&gt;Create a server-side Apex utility class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step3&#34;&gt;Create a BattleStationsList component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step4&#34;&gt;Create a BattleStationItem component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step5&#34;&gt;Create a BattleStationDetail component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step6&#34;&gt;Create BattleStationRelatedItems, ResourceList and SupplyList components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step7&#34;&gt;Create the lightning page and tab with these components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step8&#34;&gt;Add functionality with Lightning Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step9&#34;&gt;Open the App and try it out!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-name-step1-a-step-1-install-the-unmanaged-package&#34;&gt;&lt;a name=&#34;step1&#34;&gt;&lt;/a&gt;Step 1: Install the unmanaged package&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will install the unmanaged package in your Developer Edition org.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://login.salesforce.com/packaging/installPackage.apexp?p0=04t28000000HAQs&#34; target=&#34;_blank&#34;&gt;Click here to install&lt;/a&gt; the unmanaged package to get the Battle Station app metadata.
&lt;img src=&#34;images/packageInstall.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Observe and understand the setup, i.e., the custom objects, fields and the report that are installed by the package, either in the Schema Builder or directly in the Setup. If you are using the Schema Builder, click &amp;ldquo;Clear All&amp;rdquo; in the object selection panel and select the Objects &amp;ldquo;Battle Station&amp;rdquo;, &amp;ldquo;Resource&amp;rdquo; and &amp;ldquo;Supply&amp;rdquo;. Schema Builder can be found by searching for &amp;ldquo;schema builder&amp;rdquo; in the Setup search.
&lt;img src=&#34;images/schemaSetup.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/schemaBuilder.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step2-a-step-2-create-a-server-side-apex-utility-class&#34;&gt;&lt;a name=&#34;step2&#34;&gt;&lt;/a&gt;Step 2: Create a server-side Apex utility class&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-1&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create a new Apex class which will contain lightning enabled methods that can be called by components for server-side data.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the developer console from Setup &amp;gt; Developer Console.
&lt;img src=&#34;images/devConsole.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Apex Class&lt;/em&gt;, give it a name &lt;code&gt;BattleStationUtil&lt;/code&gt;, and click Ok to see the newly created skeletal Apex class.
&lt;img src=&#34;images/fileNewApex.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/newApex.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/apexSkeleton.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;BattleStationUtil&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@auraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;battle_station__c&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;getStations&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(){&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;select id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;project_status__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;weapons_status__c from battle_station__c order by createdDate desc&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@auraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;resource__c&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;getResources&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;string stationId&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;select name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; utilization__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; quantity__c from resource__c where battle_station__c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;stationId order by createdDate desc&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@auraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;supply__c&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;getSupplies&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;string stationId&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;select name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; unit_cost__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; quantity__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; total_cost__c from supply__c where battle_station__c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;stationId order by createdDate&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@auraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Battle_Station__c &lt;span style=&#34;color: #06287e&#34;&gt;createStation&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;string name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; string projectStatus&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; string weaponsStatus&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
        battle_station__c station &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; battle_station__c&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        station&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        station&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Project_Status__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; projectStatus&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        station&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Weapons_Status__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; weaponsStatus&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        insert station&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;select id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; project_status__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; weapons_status__c from battle_station__c order by createdDate desc limit &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@auraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Battle_Station__c &lt;span style=&#34;color: #06287e&#34;&gt;deleteStation&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String Id&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        battle_station__c station &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;select id from battle_station__c where id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;Id&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
        delete station&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; station&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@auraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Supply__c &lt;span style=&#34;color: #06287e&#34;&gt;insertSupply&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;string name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; integer unitCost&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; integer quantity&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; string stationId&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
        supply__c supply &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; supply__c&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        supply&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        supply&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Battle_Station__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; stationId&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        supply&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Quantity__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; quantity&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        supply&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Unit_Cost__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; unitCost&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        insert supply&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; supply&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@auraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Resource__c &lt;span style=&#34;color: #06287e&#34;&gt;insertResource&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;string name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; integer utilization&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; integer quantity&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; string stationId&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
        Resource__c resource &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Resource__c&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        resource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        resource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Battle_Station__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; stationId&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        resource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Quantity__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; quantity&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        resource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Utilization__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; utilization&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        insert resource&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; resource&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step3-a-step-3-create-a-battlestationslist-component&#34;&gt;&lt;a name=&#34;step3&#34;&gt;&lt;/a&gt;Step 3: Create a BattleStationsList component&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-2&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create a new Lightning component which will show a list of current Battle Stations and lets you create new Battle Stations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Component&lt;/em&gt;, give it a name &lt;code&gt;BattleStationsList&lt;/code&gt;, select Component Configuration checkbox for &lt;em&gt;Lightning Page&lt;/em&gt;, and click Submit to see the newly created skeletal component bundle.
&lt;img src=&#34;images/fileNewComp1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/newComp1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/newCompBundle1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default markup code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;global&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;controller=&amp;quot;BattleStationUtil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;stations&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Battle_Station__c[]&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;init&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!this}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.loadStations}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-align--absolute-center&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-text-heading--label&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Click any Battle Station to view or edit details&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-align--absolute-center&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Create new Battle Station&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.loadNew}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;table&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;myClass slds-table slds-table--bordered slds-table--cell-buffer&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-text-heading--label&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;th&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;scope=&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;title=&amp;quot;Battle Station Name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Battle Station Name&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;th&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;scope=&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;title=&amp;quot;Project Status&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Project Status&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;th&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;scope=&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;title=&amp;quot;Weapons Status&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Weapons Status&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;         
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:iteration&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;items=&amp;quot;{!v.stations}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;var=&amp;quot;station&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;

            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:iteration&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
        
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Controller&lt;/em&gt; in the right panel to open the client-side javascript controller section of the bundle.
&lt;img src=&#34;images/controllerComp1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/controller1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default Javascript code and replace with below code, and Save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    loadStations &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.getStations&amp;quot;&lt;/span&gt;);
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(response){
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(response.getState()&lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; component.isValid()){
                component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.stations&amp;quot;&lt;/span&gt;,response.getReturnValue());
            }
        });
        $A.enqueueAction(action);
    },
    loadNew &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; loadEvent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:StationClickEvent&amp;quot;&lt;/span&gt;);
        loadEvent.setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;});
        loadEvent.fire();
    },
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/controller2.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step4-a-step-4-create-a-battlestationitem-component&#34;&gt;&lt;a name=&#34;step4&#34;&gt;&lt;/a&gt;Step 4: Create a BattleStationItem component&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-3&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create another Lightning component which shows a a single Battle Station&amp;rsquo;s details as a row in the BattleStationsList component.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Component&lt;/em&gt;, give it a name &lt;code&gt;BattleStationItem&lt;/code&gt;, select Component Configuration checkbox for &lt;em&gt;Lightning Page&lt;/em&gt;, and click Submit to see the newly created skeletal component bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default markup code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;GLOBAL&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;stationItem&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Battle_Station__c&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;global&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;th&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;scope=&amp;quot;row&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;data-label=&amp;quot;Battle Station Name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;onclick=&amp;quot;{!c.loadDetail}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;{!v.stationItem.Name}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;data-label=&amp;quot;Project Status&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;{!v.stationItem.Project_Status__c}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;data-label=&amp;quot;Weapons Status&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;{!v.stationItem.Weapons_Status__c}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on Controller in the right panel to open the client-side javascript controller section of the bundle.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default Javascript code and replace with below code, and Save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    loadDetail &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; station &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.stationItem&amp;quot;&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; loadEvent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:StationClickEvent&amp;quot;&lt;/span&gt;);
        loadEvent.setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;station&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;station,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;});
        loadEvent.fire();
    },
})
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add this new component to the previous BattleStationsList component&amp;rsquo;s markup. To do so, open the &lt;code&gt;BattleStationsList&lt;/code&gt; component markup and add the following line of markup inside the &lt;code&gt;aura:iteration&lt;/code&gt; component.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;c:BattleStationItem&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;stationItem=&amp;quot;{!station}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/itemToList.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step5-a-step-5-create-a-battlestationdetail-component&#34;&gt;&lt;a name=&#34;step5&#34;&gt;&lt;/a&gt;Step 5: Create a BattleStationDetail component&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-4&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create a lightning component which displays the details of a Battle Station record and lets you edit and delete the record, or create a new record.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Component&lt;/em&gt;, give it a name &lt;code&gt;BattleStationDetail&lt;/code&gt;, select Component Configuration checkbox for &lt;em&gt;Lightning Page&lt;/em&gt;, and click Submit to see the newly created skeletal component bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default markup code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;GLOBAL&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;controller=&amp;quot;BattleStationUtil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;onSaveSuccess&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;event=&amp;quot;force:recordSaveSuccess&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.saveSuccess}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Battle_Station__c&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;station&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;global&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;default=&amp;quot;{&amp;#39;sobjectType&amp;#39;:&amp;#39;Battle_Station__c&amp;#39;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Boolean&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;editView&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;default=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Boolean&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;createView&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;default=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Boolean&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;detailView&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;default=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{! v.createView }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-align--absolute-center&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;save&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Save&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.insertStation}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;cancel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Cancel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.cancelCreate}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Battle Station name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.station.Name}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelect&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Project Status&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.station.Project_Status__c}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Green&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Green&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Yellow&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Yellow&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Red&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Red&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Complete&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Complete&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ui:inputSelect&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelect&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Weapons Status&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.station.Weapons_Status__c}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Not Yet Operational&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Not Yet Operational&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Fully Operational&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Fully Operational&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ui:inputSelect&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{! v.detailView }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-align--absolute-center&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;edit&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Edit&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.makeEdit}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;delete&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Delete&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.removeStation}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;force:recordView&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;record&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;recordId=&amp;quot;{!v.station.Id}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{! v.editView }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-align--absolute-center&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;save&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Save&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.saveStation}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;cancel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Cancel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.cancelEdit}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;force:recordEdit&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;recedit&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;recordId=&amp;quot;{!v.station.Id}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
        
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Controller&lt;/em&gt; in the right panel to open the client-side javascript controller section of the bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default Javascript code and replace with below code, and Save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    showStation &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; newView &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.getParam(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; station &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.getParam(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;station&amp;quot;&lt;/span&gt;);
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;,station);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (newView) {
            helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;create&amp;quot;&lt;/span&gt;);  
        } &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;);
        }
    },
    makeEdit &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;);
    },
    saveStation &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {       
        component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;recedit&amp;quot;&lt;/span&gt;).get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.recordSave&amp;quot;&lt;/span&gt;).fire();
    },
    saveSuccess &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:updatedListEvent&amp;quot;&lt;/span&gt;).fire();
        helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;);       
    },
    cancelEdit &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;);
    },
    cancelCreate &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;);
    },
    makeNew &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;create&amp;quot;&lt;/span&gt;);
    },
    insertStation &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.createStation&amp;quot;&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; station &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;);
        action.setParams({
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; station.Name,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;projectStatus&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; station.Project_Status__c,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;weaponsStatus&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; station.Weapons_Status__c
        });
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(response){
            $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:updatedListEvent&amp;quot;&lt;/span&gt;).fire();
            $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:StationClickEvent&amp;quot;&lt;/span&gt;).setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;station&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;response.getReturnValue()}).fire();
            helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;);
        });
        $A.enqueueAction(action);
    },
    removeStation &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.deleteStation&amp;quot;&lt;/span&gt;);
        action.setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;).Id});
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(response){
            $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.force:showToast&amp;quot;&lt;/span&gt;).setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Battle Station Deleted&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;2500&amp;quot;&lt;/span&gt;}).fire();
            helper.toggleView(component, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;);
            $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:updatedListEvent&amp;quot;&lt;/span&gt;).fire();
        })
        $A.enqueueAction(action);
    },
})
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Helper&lt;/em&gt; in the right panel to open the client-side javascript controller section of the bundle.
&lt;img src=&#34;images/helper1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default Javascript code and replace with below code, and Save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    toggleView &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, view) {
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.detailView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.editView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
            
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; ( view &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;create&amp;quot;&lt;/span&gt; ) component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; ( view &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;edit&amp;quot;&lt;/span&gt; ) component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.editView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; ( view &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;detail&amp;quot;&lt;/span&gt; ) component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.detailView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;);
    }
})
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step6-a-step-6-create-battlestationrelateditems-resourcelist-and-supplylist-components&#34;&gt;&lt;a name=&#34;step6&#34;&gt;&lt;/a&gt;Step 6: Create BattleStationRelatedItems, ResourceList and SupplyList components&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-5&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create components to show related Related Resources and Supplies and another BattleStationRelatedItems component which contains the list components.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Component&lt;/em&gt;, give it a name &lt;code&gt;ResourceList&lt;/code&gt;, select Component Configuration checkbox for &lt;em&gt;Lightning Page&lt;/em&gt;, and click Submit to see the newly created skeletal component bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default markup code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;global&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;controller=&amp;quot;BattleStationUtil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;station&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Battle_Station__c&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;resources&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Resource__c[]&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;newResource&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Resource__c&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;default=&amp;quot;{&amp;#39;sobjectType&amp;#39;:&amp;#39;Resource__c&amp;#39;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;createView&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Boolean&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;init&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!this}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.loadResources}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;change&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.station}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.loadResources}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Create New&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.createView}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{!v.createView}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Resource name:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newResource.Name}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Quantity:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newResource.Quantity__c}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Utilization: %&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newResource.Utilization__c}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Save&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.createResource}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Cancel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.cancelSave}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-has-dividers--around-space&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:iteration&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;items=&amp;quot;{!v.resources}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;var=&amp;quot;resource&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;li&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile slds-tile--board&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h3&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate slds-text-heading--medium&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;title=&amp;quot;Anypoint Connectors&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;{!resource.Name}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile__detail slds-text-body--small&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-text-heading--medium&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Quantity: {!resource.Quantity__c}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Utilization: {!resource.Utilization__c}%&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:iteration&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Controller&lt;/em&gt; in the right panel to open the client-side javascript controller section of the bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default Javascript code and replace with below code, and Save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    loadResources &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.getResources&amp;quot;&lt;/span&gt;);
        action.setParams({
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;stationId&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;).Id
        });
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(response){
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(response.getState()&lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; component.isValid()){
                component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.resources&amp;quot;&lt;/span&gt;,response.getReturnValue());
            }
        });
        $A.enqueueAction(action);
    },
    createView &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;);
    },
    cancelSave &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
    },
    createResource &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.insertResource&amp;quot;&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; supply &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.newResource&amp;quot;&lt;/span&gt;);
        action.setParams({
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; supply.Name,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;utilization&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; supply.Utilization__c,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;quantity&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; supply.Quantity__c,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;stationId&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;).Id
        });
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(response){
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(response.getState()&lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; component.isValid()) {
                component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
                $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:StationClickEvent&amp;quot;&lt;/span&gt;).setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;station&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;)}).fire();
            }
        });
            
        $A.enqueueAction(action);
    }
})
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Component&lt;/em&gt;, give it a name &lt;code&gt;SupplyList&lt;/code&gt;, select Component Configuration checkbox for &lt;em&gt;Lightning Page&lt;/em&gt;, and click Submit to see the newly created skeletal component bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default markup code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;global&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;controller=&amp;quot;BattleStationUtil&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;station&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Battle_Station__c&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;supplies&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Supply__c[]&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;newSupply&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Supply__c&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;default=&amp;quot;{&amp;#39;sobjectType&amp;#39;:&amp;#39;Supply__c&amp;#39;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;createView&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Boolean&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;init&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!this}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.loadSupplies}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;change&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.station}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.loadSupplies}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Create New&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.createView}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{!v.createView}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Supply name:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newSupply.Name}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Unit Cost: $&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newSupply.Unit_Cost__c}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Quantity:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newSupply.Quantity__c}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Save&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.createSupply}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Cancel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.cancelSave}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-has-dividers--around-space&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:iteration&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;items=&amp;quot;{!v.supplies}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;var=&amp;quot;supply&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;li&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile slds-tile--board&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h3&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate slds-text-heading--medium&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;title=&amp;quot;Anypoint Connectors&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;{!supply.Name}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile__detail slds-text-body--small&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-text-heading--medium&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Quantity: {!supply.Quantity__c}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Unit Cost:  ${!supply.Unit_Cost__c}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Total Cost: ${!supply.Total_Cost__c}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:iteration&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Controller&lt;/em&gt; in the right panel to open the client-side javascript controller section of the bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default Javascript code and replace with below code, and Save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    loadSupplies &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.getSupplies&amp;quot;&lt;/span&gt;);
        action.setParams({
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;stationId&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;).Id
        });
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(response){
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(response.getState()&lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; component.isValid()){
                component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.supplies&amp;quot;&lt;/span&gt;,response.getReturnValue());
            }
        });
        $A.enqueueAction(action);
    },
    createView &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;);
    },
    cancelSave &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
    },
    createSupply &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.insertSupply&amp;quot;&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; supply &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.newSupply&amp;quot;&lt;/span&gt;);
        action.setParams({
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; supply.Name,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;unitCost&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; supply.Unit_Cost__c,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;quantity&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; supply.Quantity__c,
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;stationId&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;).Id
        });
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(response){
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt;(response.getState()&lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; component.isValid()) {
                component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.createView&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
                $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:StationClickEvent&amp;quot;&lt;/span&gt;).setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;station&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;)}).fire();
            }
        });
            
        $A.enqueueAction(action);
    }
})
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Component&lt;/em&gt;, give it a name &lt;code&gt;StationRelatedLists&lt;/code&gt;, select Component Configuration checkbox for &lt;em&gt;Lightning Page&lt;/em&gt;, and click Submit to see the newly created skeletal component bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default markup code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;global&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;station&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Battle_Station__c&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;show&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Boolean&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{!v.show}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped__nav&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;role=&amp;quot;tablist&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;li&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;tab1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;onclick=&amp;quot;{!c.switchTab}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped__item slds-text-heading--label slds-active&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;title=&amp;quot;Resources&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;role=&amp;quot;presentation&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped__link&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;role=&amp;quot;tab&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;tabindex=&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aria-selected=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aria-controls=&amp;quot;tab-scoped-1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;tab-scoped-1__item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Resources&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;li&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;tab2&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;onclick=&amp;quot;{!c.switchTab}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped__item slds-text-heading--label &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;title=&amp;quot;Supplies&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;role=&amp;quot;presentation&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped__link&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;role=&amp;quot;tab&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;tabindex=&amp;quot;-1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aria-selected=&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aria-controls=&amp;quot;tab-scoped-2&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;tab-scoped-2__item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Supplies&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;content1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;tab-scoped-1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped__content slds-show&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;role=&amp;quot;tabpanel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aria-labelledby=&amp;quot;tab-scoped-1__item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;c:ResourceList&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;station=&amp;quot;{!v.station}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;content2&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;tab-scoped-2&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tabs--scoped__content slds-hide&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;role=&amp;quot;tabpanel&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aria-labelledby=&amp;quot;tab-scoped-2__item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;c:SupplyList&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;station=&amp;quot;{!v.station}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt; 
        
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Controller&lt;/em&gt; in the right panel to open the client-side javascript controller section of the bundle. For navigation help, refer to screenshots from Step 3.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default Javascript code and replace with below code, and Save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    showRelated &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; newView &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.getParam(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (newView) {
            component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.show&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;);
        } &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; station &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.getParam(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;station&amp;quot;&lt;/span&gt;);
            component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.station&amp;quot;&lt;/span&gt;,station);
            component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.show&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;);
        }    
    },
    switchTab &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        $A.util.toggleClass(component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;tab1&amp;quot;&lt;/span&gt;),&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slds-active&amp;quot;&lt;/span&gt;);
        $A.util.toggleClass(component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;tab2&amp;quot;&lt;/span&gt;),&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slds-active&amp;quot;&lt;/span&gt;);
        $A.util.toggleClass(component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;content1&amp;quot;&lt;/span&gt;),&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slds-show&amp;quot;&lt;/span&gt;);
        $A.util.toggleClass(component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;content1&amp;quot;&lt;/span&gt;),&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slds-hide&amp;quot;&lt;/span&gt;);
        $A.util.toggleClass(component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;content2&amp;quot;&lt;/span&gt;),&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slds-show&amp;quot;&lt;/span&gt;);
        $A.util.toggleClass(component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;content2&amp;quot;&lt;/span&gt;),&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;slds-hide&amp;quot;&lt;/span&gt;);
    }
})
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step7-a-step-7-create-the-lightning-page-and-tab-with-these-components&#34;&gt;&lt;a name=&#34;step7&#34;&gt;&lt;/a&gt;Step 7: Create the lightning page and tab with these components&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-6&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will use the Lightning App Builder to create a new lightning tab using the components we created plus an additional standard Report Chart component. You will then add it to the navigation menu of lightning experience.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;em&gt;Setup&lt;/em&gt; and type &lt;code&gt;App Builder&lt;/code&gt; in the setup search, click on it and then click &lt;em&gt;New&lt;/em&gt; on the App Builder page to open the App Builder.
&lt;img src=&#34;images/appNew.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;App Page&lt;/em&gt; and click &lt;em&gt;Next&lt;/em&gt;.
&lt;img src=&#34;images/appPage.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;em&gt;Two Columns&lt;/em&gt; and click &lt;em&gt;Next&lt;/em&gt;.
&lt;img src=&#34;images/twoCol.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter Label as &lt;code&gt;Battle Station Manager&lt;/code&gt; and click &lt;em&gt;Finish&lt;/em&gt;.
&lt;img src=&#34;images/battleStationManager.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &lt;em&gt;Desktop&lt;/em&gt; from the device dropdown.
&lt;img src=&#34;images/desktop.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag the &lt;em&gt;BattleStationsList&lt;/em&gt; component from the &lt;em&gt;Custom Components&lt;/em&gt; section in the components Panel and drop it in the left column of the canvas.
&lt;img src=&#34;images/bslist.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag the &lt;em&gt;BattleStationDetail&lt;/em&gt; component from the &lt;em&gt;Custom Components&lt;/em&gt; section in the components Panel and drop it in the right column of the canvas.
&lt;img src=&#34;images/bsdetail.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag the &lt;em&gt;StationRelatedLists&lt;/em&gt; component from the &lt;em&gt;Custom Components&lt;/em&gt; section in the components Panel and drop it in the right column of the canvas, below the &lt;em&gt;BattleStationDetail&lt;/em&gt; component.
&lt;img src=&#34;images/bsrelated.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag the &lt;em&gt;Report Chart&lt;/em&gt; component from the &lt;em&gt;Standard Components&lt;/em&gt; section in the components Panel and drop it in the left column of the canvas, below the &lt;em&gt;BattleStationsList&lt;/em&gt; component. Once dropped, on the right panel, enter &lt;em&gt;Label&lt;/em&gt; as &lt;code&gt;Battle Station Supplies Chart&lt;/code&gt;, check the &lt;em&gt;Show Refresh Button&lt;/em&gt; option, and click &lt;em&gt;Save&lt;/em&gt; on the top right.
&lt;img src=&#34;images/reportchart.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;em&gt;Page Saved&lt;/em&gt; popup, click &lt;em&gt;Activate&lt;/em&gt;.
&lt;img src=&#34;images/activate.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the Activation page, click on the &lt;em&gt;Lightning Experience&lt;/em&gt; tab.
&lt;img src=&#34;images/lightexp.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on &lt;em&gt;Go create one!&lt;/em&gt;
&lt;img src=&#34;images/gocreateone.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This is will the &lt;em&gt;Navigation Menus&lt;/em&gt; page in a new tab. Click &lt;em&gt;New&lt;/em&gt; button in the right top corner.
&lt;img src=&#34;images/navmenunew.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter &lt;em&gt;Name&lt;/em&gt; as &lt;code&gt;Battle Station&lt;/code&gt; and click &lt;em&gt;Next&lt;/em&gt;.
&lt;img src=&#34;images/namenext.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the &lt;em&gt;Home&lt;/em&gt; and &lt;em&gt;Battle Stations&lt;/em&gt; tabs under &lt;em&gt;Navigation Menu items&lt;/em&gt; and click &lt;em&gt;Next&lt;/em&gt;.
&lt;img src=&#34;images/homebattle.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &amp;ldquo;System Administrator&amp;rdquo; profile and add it to the &lt;em&gt;Selected Profiles&lt;/em&gt; list, and click &lt;em&gt;Save &amp;amp; Finish&lt;/em&gt;.
&lt;img src=&#34;images/profiles.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Come back to the previous tab, click &lt;em&gt;Refresh&lt;/em&gt;, and add page to the navogation menu. Do the same for the Salesforce1 tab as well, and click &lt;em&gt;Save&lt;/em&gt;.
&lt;img src=&#34;images/addtomenu.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/savemenu.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the &lt;em&gt;Back&lt;/em&gt; button to return to the Setup. Notice that the navigation menu on the left has changed. Click on the icon for the &lt;em&gt;Battle Station Manager&lt;/em&gt;.
&lt;img src=&#34;images/openApp.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/appFirstRun.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step8-a-step-8-add-functionality-with-lightning-events&#34;&gt;&lt;a name=&#34;step8&#34;&gt;&lt;/a&gt;Step 8: Add functionality with Lightning Events&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-7&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create Lightning Events which will be fired and handled by the components to communicate and perform actions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Event&lt;/em&gt;, give it a name &lt;code&gt;StationClickEvent&lt;/code&gt; and click Submit to see the newly created skeletal event markup.
&lt;img src=&#34;images/clickevent1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;
&lt;img src=&#34;images/clickevent2.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear the default markup code and replace with below code, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:event&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;APPLICATION&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;GLOBAL&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;station&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Battle_Station__c&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;GLOBAL&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Boolean&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;access=&amp;quot;GLOBAL&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:event&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/clickevent3.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the developer console, click &lt;em&gt;File &amp;gt; New &amp;gt; Lightning Event&lt;/em&gt;, give it a name &lt;code&gt;updatedListEvent&lt;/code&gt; and click Submit to see the newly created skeletal event markup.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Leave the default markup as is, and click &lt;em&gt;File &amp;gt; Save&lt;/em&gt;:
&lt;img src=&#34;images/updateevent.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the &lt;em&gt;BattleStationsList&lt;/em&gt; component markup, and add the following code after the first &lt;code&gt;aura:component&lt;/code&gt; line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:registerEvent&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;showStation&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;c:StationClickEvent&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;event=&amp;quot;c.updatedListEvent&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.loadStations}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/listevent.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the &lt;em&gt;BattleStationItem&lt;/em&gt; component markup, and add the following code after the first &lt;code&gt;aura:component&lt;/code&gt; line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:registerEvent&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;showStation&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;c:StationClickEvent&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/itemevent.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the &lt;em&gt;BattleStationDetail&lt;/em&gt; component markup, and add the following code after the first &lt;code&gt;aura:component&lt;/code&gt; line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;event=&amp;quot;c:StationClickEvent&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.showStation}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/detailevent.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the &lt;em&gt;ResourceList&lt;/em&gt; component markup, and add the following code after the first &lt;code&gt;aura:component&lt;/code&gt; line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:registerEvent&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;showStation&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;c:StationClickEvent&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/resevent.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the &lt;em&gt;SupplyList&lt;/em&gt; component markup, and add the following code after the first &lt;code&gt;aura:component&lt;/code&gt; line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:registerEvent&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;showStation&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;c:StationClickEvent&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/supevent.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the &lt;em&gt;StationRelatedLists&lt;/em&gt; component markup, and add the following code after the first &lt;code&gt;aura:component&lt;/code&gt; line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;event=&amp;quot;c:StationClickEvent&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.showRelated}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;images/relatedevent.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-name-step9-a-step-9-open-the-app-and-try-it-out&#34;&gt;&lt;a name=&#34;step9&#34;&gt;&lt;/a&gt;Step 9: Open the App and try it out!&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-8&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You can play with the app now. Try creating, editing, deleting, or just accessing Battle Stations or Related Resources or Supplies.
&lt;img src=&#34;images/appready1.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;h4 id=&#34;final-app-after-creating-a-few-records&#34;&gt;Final App after creating a few records&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;images/BattleStationManagerApp.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;h5 id=&#34;todo&#34;&gt;TODO&lt;/h5&gt;
</description>
    </item>
    
    <item>
      <title>Build a Conference Management App using Lightning</title>
      <link>http://www.sfdcworkshop.com/workshop/conference-mgmt/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/conference-mgmt/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this project, you learn how to build an application from start to finish using the Lightning framework for the Lightning Experience desktop UI and the Salesforce1 mobile app. We will build an app to manage sessions and speakers at a conference. We will build the UI and also automate tasks for Conference Management, using a Salesforce Developer Edition org. If you don&amp;rsquo;t have one, you can sign up &lt;a href=&#34;https://developer.salesforce.com/signup&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the steps involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the Data Model using the Schema Builder&lt;/li&gt;
&lt;li&gt;Create a New Speaker Form Lightning Component&lt;/li&gt;
&lt;li&gt;Create a Session list Lightning Component&lt;/li&gt;
&lt;li&gt;Write an Apex class for Components client-side&lt;/li&gt;
&lt;li&gt;Use the Lightning App Builder to buil the App with the newly created components&lt;/li&gt;
&lt;li&gt;Add the app to Salesforce1 and Lightning Experience&lt;/li&gt;
&lt;li&gt;Configure time-based actions using Lightning Process Builder&lt;/li&gt;
&lt;li&gt;Build an Apex Trigger to handle advanced tasks.&lt;/li&gt;
&lt;li&gt;Test the App using Apex unit tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-1-create-the-data-model&#34;&gt;Step 1: Create the Data Model&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create custom sObjects for Sessions, Speakers and Session Speaker associations quickly using the Schema Builder.&lt;/p&gt;

&lt;h5 id=&#34;todo&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;step-2-create-the-speaker-form-component&#34;&gt;Step 2: Create the Speaker form component&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-1&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create a new Lightning component which will let you add new speakers and assign them to existing sessions.&lt;/p&gt;

&lt;h5 id=&#34;todo-1&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;step-3-create-the-session-list-component&#34;&gt;Step 3: Create the Session List component&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-2&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create another Lightning component which shows a list of current sessions including speaker name.&lt;/p&gt;

&lt;h5 id=&#34;todo-2&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;step-4-create-the-apex-controller&#34;&gt;Step 4: Create the Apex controller&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-3&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create an Apex controller which contains the methods accessed by the components to retrieve server-side data.&lt;/p&gt;

&lt;h5 id=&#34;todo-3&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;step-5-create-the-app-for-desktop-and-salesforce1&#34;&gt;Step 5: Create the App for desktop and Salesforce1&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-4&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create a new Lightning app using the Lightning App Builder and add the new app to Salesforce1 mobile app and the Lightning Experience desktop UI.&lt;/p&gt;

&lt;h5 id=&#34;todo-4&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;step-6-create-the-process&#34;&gt;Step 6: Create the Process&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-5&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create a process to send reminder emails to speakers before their sessions using the Lightning Process Builder.&lt;/p&gt;

&lt;h5 id=&#34;todo-5&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;step-7-create-the-apex-trigger&#34;&gt;Step 7: Create the Apex trigger&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-6&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create an Apex trigger to send confirmation emails to speakers when they are assigned to a session.&lt;/p&gt;

&lt;h5 id=&#34;todo-6&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;step-8-create-the-apex-test-class&#34;&gt;Step 8: Create the Apex test class&lt;/h3&gt;

&lt;h4 id=&#34;what-you-ll-do-7&#34;&gt;What you&amp;rsquo;ll do&lt;/h4&gt;

&lt;p&gt;You will create an Apex class which contains all the unit tests covering the Apex controller and trigger code we previously wrote.&lt;/p&gt;

&lt;h5 id=&#34;todo-7&#34;&gt;TODO&lt;/h5&gt;

&lt;h3 id=&#34;todo-8&#34;&gt;TODO&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Build a Recommendation Engine with PredictionIO </title>
      <link>http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;index_local&#34;&gt;Recommendation Engine with PredictionIO Locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;index_heroku&#34;&gt;Recommendation Engine with PredictionIO on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Build a Recommendation Engine with PredictionIO : Heroku</title>
      <link>http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/index_heroku/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/index_heroku/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#source-code&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-1-clone-the-source-code&#34;&gt;Step 1 Clone the Source code &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-2-create-a-heroku-app&#34;&gt;Step 2 Create a Heroku App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-3-deploy-event-server-to-heroku&#34;&gt;Step 3 Deploy Event Server to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-4-create-a-new-app&#34;&gt;Step 4 Create a new app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-5-populate-event-server-with-events&#34;&gt;Step 5 Populate Event Server with Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-6-deploy-recommendation-engine&#34;&gt;Step 6 Deploy Recommendation Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-7-configure-the-heroku-app&#34;&gt;Step 7 Configure the Heroku app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-8-increase-heap-size-for-java-vm&#34;&gt;Step 8 Increase Heap size for Java VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-9-train-the-engine&#34;&gt;Step 9 Train the Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-10-predict&#34;&gt;Step 10 Predict&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this workshop you will learn how to use PredictionIO Machine Learning library to build a recommendation engine based on Alternative Least Square Algorithm. PredictionIO uses Spark MLlib&amp;rsquo;s implementation and provide convenient APIs and REST endpoints to get the infrastructure up and running fast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/images/recommendation_engine_local.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Heroku Account&lt;/li&gt;
&lt;li&gt;Heroku CLI (git is part of Heroku CLI)&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msysgit/msysgit/releases/tag/Git-1.9.5-preview20141217&#34;&gt;git-bash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heroku account with Credit Card is required for two Dynos to run simultaneously&lt;/p&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;Source code of this workshop resides in two repos listed below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rajdeepd/pio-eventserver-heroku&#34;&gt;https://github.com/rajdeepd/pio-eventserver-heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rajdeepd/pio-engine-heroku&#34;&gt;https://github.com/rajdeepd/pio-engine-heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;pio-eventserver-heroku&lt;/strong&gt; : Provdes storage for events being generated based on which we want to create our training model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pio-engine-heroku&lt;/strong&gt; : Engine which wraps the ALS Algorithm implementation and provides APIs to create a model, train it and use it to make prediction.&lt;/p&gt;

&lt;p&gt;We will be using PostgreSQL database for this workshop.&lt;/p&gt;

&lt;h2 id=&#34;step-1-clone-the-source-code&#34;&gt;Step 1 Clone the Source code&lt;/h2&gt;

&lt;p&gt;Clone the source code&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git clone https://github.com/rajdeepd/pio-eventserver-heroku

&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git clone https://github.com/rajdeepd/pio-engine-heroku
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-2-create-a-heroku-app&#34;&gt;Step 2 Create a Heroku App&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: You need to change &lt;code&gt;rd-pio-eventserver-1&lt;/code&gt; to your own unique app name&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;cd &lt;/span&gt;pio-eventserver-heroku
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku create rd-pio-eventserver-1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Creating rd-pio-eventserver-1... &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;, stack is cedar-14
https://rd-pio-eventserver-1.herokuapp.com/ | 
https://git.heroku.com/rd-pio-eventserver-1.git
Git remote heroku added
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check git remote&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git remote -v
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;heroku  https://git.heroku.com/rd-pio-eventserver-1.git (fetch)
heroku  https://git.heroku.com/rd-pio-eventserver-1.git (push)
origin  https://github.com/rajdeepd/pio-eventserver-heroku (fetch)
origin  https://github.com/rajdeepd/pio-eventserver-heroku (push)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-3-deploy-event-server-to-heroku&#34;&gt;Step 3 Deploy Event Server to Heroku&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;remote:        [info] Done updating.
remote:        [info] Compiling 1 Scala source to /tmp/scala_...
remote:        [success] Total time: 42 s, completed Aug 25, 2016 9:59:56 AM
remote:        [info] Wrote scala-2.10/pio-eventserver-heroku_2.10-0.1-SNAPSHOT.pom
remote:        [info] Packaging pio-eventserver-heroku_2.10-0.1-SNAPSHOT.jar ...
remote:        [info] Done packaging.
remote:        [success] Total time: 2 s, completed Aug 25, 2016 9:59:58 AM
remote: -----&amp;gt; Dropping ivy cache from the slug
remote: -----&amp;gt; Dropping sbt boot dir from the slug
remote: -----&amp;gt; Dropping compilation artifacts from the slug
remote: -----&amp;gt; Discovering process types
remote:        Procfile declares types -&amp;gt; console, web
remote: 
remote: -----&amp;gt; Compressing...
remote:        Done: 183.1M
remote: -----&amp;gt; Launching...
remote:        Released v4
remote:        https://rd-pio-eventserver-1.herokuapp.com/ deployed to Heroku
remote: 
remote: Verifying deploy.... done.
To https://git.heroku.com/rd-pio-eventserver-1.git
 * [new branch]      master -&amp;gt; master

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the &lt;code&gt;DATABASE_URL&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku &lt;span style=&#34;color: #bb60d5&#34;&gt;config&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; rd-pio-eventserver-1 Config Vars
DATABASE_URL: postgres://rdatjvbvdwqvyq:nNL9b1cnjoQt8hCcQumEMahrmL@ec2-54-243-208-195.compute-1.amazonaws.com:5432/d8spomhdp00n03
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-4-create-a-new-app&#34;&gt;Step 4 Create a new app&lt;/h2&gt;

&lt;p&gt;PredictionIO tracks events, ML engine based on App ID. We will create a new app and tie events to this ID as well the ML engine which will be trained later&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku run console app new MyApp1
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Running `console app new MyApp1` attached to terminal... up, run.5174
[INFO] [App$] Initialized Event Store for this app ID: 1.
[INFO] [App$] Created new app:
[INFO] [App$]       Name: MyApp1
[INFO] [App$]         ID: 1
[INFO] [App$] Access Key: 2Evbo5hiUiXXXCu_uB-gK1Q3EiT2N8nGd1-AGY5hjrsQ3PonJCdwP1YZ5WN5519O

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-environment-variable&#34;&gt;Set Environment variable&lt;/h3&gt;

&lt;h4 id=&#34;linux-mac-os-x&#34;&gt;Linux, Mac OS X&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;ACCESS_KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;2Evbo5hiUiXXXCu_uB-gK1Q3EiT2N8nGd1-AGY5hjrsQ3PonJCdwP1YZ5WN5519O
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&#34;windows&#34;&gt;Windows&lt;/h5&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;set &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;ACCESS_KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;2Evbo5hiUiXXXCu_uB-gK1Q3EiT2N8nGd1-AGY5hjrsQ3PonJCdwP1YZ5WN5519O
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-5-populate-event-server-with-events&#34;&gt;Step 5 Populate Event Server with Events&lt;/h2&gt;

&lt;p&gt;Please change heroku app name from CHANGEME to the actual value you gave earier in the URL for all the commands listed below.&lt;/p&gt;

&lt;h4 id=&#34;linux-mac-os-x-1&#34;&gt;Linux, Mac OS X&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;1..5&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt; curl -i -X POST http://CHANGEME.herokuapp.com/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ACCESS_KEY&lt;/span&gt; -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;\$set\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;user\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;u&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot; }&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;1..50&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt; curl -i -X POST http://CHANGEME.herokuapp.com/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ACCESS_KEY&lt;/span&gt; -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;\$set\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;item\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;i&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot;, \&amp;quot;properties\&amp;quot; : { \&amp;quot;categories\&amp;quot; : [\&amp;quot;c1\&amp;quot;, \&amp;quot;c2\&amp;quot;] } }&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;1..5&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt; curl -i -X POST http://CHANGEME.herokuapp.com/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ACCESS_KEY&lt;/span&gt; -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;view\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;user\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;u&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot;,  \&amp;quot;targetEntityType\&amp;quot; : \&amp;quot;item\&amp;quot;, \&amp;quot;targetEntityId\&amp;quot; : \&amp;quot;i&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$((&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt; RANDOM &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot; }&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;windows-1&#34;&gt;Windows&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; /L %a IN &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;1,1,5&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; DO &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
  curl -i -X POST http://rd-pio-eventserver-t1.herokuapp.com/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;%ACCESS_KEY% -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;\$set\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;user\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;u%a\&amp;quot; }&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; /L %a IN &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;1,1,50&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; DO &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
  curl -i -X POST http://rd-pio-eventserver-t1.herokuapp.com/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;%ACCESS_KEY% -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;\$set\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;item\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;i%a\&amp;quot;, \&amp;quot;properties\&amp;quot; : { \&amp;quot;categories\&amp;quot; : [\&amp;quot;c1\&amp;quot;, \&amp;quot;c2\&amp;quot;] } }&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; /L %a IN &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;1,1,5&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; DO &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
     curl -i -X POST http://rd-pio-eventserver-t1.herokuapp.com/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;%ACCESS_KEY% -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;view\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;user\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;u1\&amp;quot;,  \&amp;quot;targetEntityType\&amp;quot; : \&amp;quot;item\&amp;quot;, \&amp;quot;targetEntityId\&amp;quot; : \&amp;quot;i%a\&amp;quot; }&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;step-5-1-check-the-events-inserted-in-a-browser&#34;&gt;Step 5.1 Check the Events Inserted in a Browser&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://rd-pio-eventserver-1.herokuapp.com/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;2Evbo5hiUiXXXCu_uB-gK1Q3EiT2N8nGd1-AGY5hjrsQ3PonJCdwP1YZ5WN5519O&amp;amp;&lt;span style=&#34;color: #bb60d5&#34;&gt;limit&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;100
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/images/pio-events-screenshot.png&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-6-deploy-recommendation-engine&#34;&gt;Step 6 Deploy Recommendation Engine&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: You need to change &lt;code&gt;rd-pio-engine-1&lt;/code&gt; to your own unique app name&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;cd &lt;/span&gt;pio-engine-heroku
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku create rd-pio-engine-1
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;step-6-1-remove-existing-addon&#34;&gt;Step 6.1 : Remove existing AddOn&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;=== Resources for rd-pio-engine-1
Plan                         Name                     Price
---------------------------  -----------------------  -----
heroku-postgresql:hobby-dev  postgresql-pointy-19292  free

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons:remove postgresql-pointy-19292
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
WARNING: `heroku addons:remove` has been deprecated. Please use `heroku addons:destroy` instead.

 !    WARNING: Destructive Action
 !    This command will affect the app: rd-pio-engine-1
 !    To proceed, type &amp;quot;rd-pio-engine-1&amp;quot; or re-run this command with --confirm rd-pio-engine-1

&amp;gt; rd-pio-engine-1
Destroying postgresql-pointy-19292 on rd-pio-engine-1... done, (free)
Removing vars for DATABASE from rd-pio-engine-1 and restarting... done, v5

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-6-2-configure-database-url-to-point-to-event-server-db&#34;&gt;Step 6.2 Configure DATABASE_URL to point to Event Server DB&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku config:set &lt;span style=&#34;color: #bb60d5&#34;&gt;DATABASE_URL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;postgres://rdatjvbvdwqvyq:nNL9b1cnjoQt8hCcQumEMahrmL@ec2-54-243-208-195.compute-1.amazonaws.com:5432/d8spomhdp00n03
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-7-configure-the-heroku-app&#34;&gt;Step 7 Configure the Heroku app&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;heroku config:set &lt;span style=&#34;color: #bb60d5&#34;&gt;ACCESS_KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;lt;YOUR APP ACCESS KEY&amp;gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;APP_NAME&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;lt;APP NAME&amp;gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;EVENT_SERVER_IP&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;lt;YOUR EVENT SERVER HOSTNAME&amp;gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;EVENT_SERVER_PORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;80
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku config:set ACCESS_KEY=2Evbo5hiUiXXXCu_uB-gK1Q3EiT2N8nGd1-AGY5hjrsQ3PonJCdwP1YZ5WN5519O APP_NAME=MyApp1 \
  EVENT_SERVER_IP=rd-pio-eventserver-1.herokuapp.com \
  EVENT_SERVER_PORT=80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Setting config vars and restarting rd-pio-engine-1... done, v6
ACCESS_KEY:        2Evbo5hiUiXXXCu_uB-gK1Q3EiT2N8nGd1-AGY5hjrsQ3PonJCdwP1YZ5WN5519O
APP_NAME:          MyApp1
EVENT_SERVER_IP:   rd-pio-eventserver-1.herokuapp.com
EVENT_SERVER_PORT: 80

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-8-increase-heap-size-for-java-vm&#34;&gt;Step 8 Increase Heap size for Java VM&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku config:set &lt;span style=&#34;color: #bb60d5&#34;&gt;JAVA_OPTS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;-Xmx512m&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-9-train-the-engine&#34;&gt;Step 9 Train the Engine&lt;/h2&gt;

&lt;p&gt;In this step we will train the Recommendation Engine based on the Events inserted above. Code listed below is the core training method called inside PredictionIO Servier&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;val&lt;/span&gt; m &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ALS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;trainImplicit&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
      ratings &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; mllibRatings&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      rank &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; ap&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;rank&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      iterations &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; ap&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;numIterations&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      lambda &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; ap&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;lambda&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      blocks &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      alpha &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1.0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      seed &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; seed&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ALSModel&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
      productFeatures &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;productFeatures&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;collectAsMap&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;toMap&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      itemStringIntMap &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; itemStringIntMap&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      items &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;=&lt;/span&gt; items
    &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Optional&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Step&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are running free dynos makes sure you scale down the web dynos before training&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku ps:scale &lt;span style=&#34;color: #bb60d5&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;train&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now run the training command&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku run train
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
[INFO] [Engine$] ALSModel does not support data sanity check. Skipping check.
[INFO] [Engine$] EngineWorkflow.train completed
[INFO] [Engine] engineInstanceId=efb28115-5007-4356-a45c-cab9b7b1da6f
[INFO] [CoreWorkflow$] Inserting persistent model
[INFO] [CoreWorkflow$] Updating engine instance
[INFO] [CoreWorkflow$] Training completed successfully.
[INFO] [ServerConnector] Stopped ServerConnector@18578491{HTTP/1.1}{0.0.0.0:4040}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bring back the Web dyno (for setups using free dynos)&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;heroku ps:scale &lt;span style=&#34;color: #bb60d5&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;train&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check the Recommendation Engine running in the browser&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/images/pio-engine-screenshot.png&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-10-predict&#34;&gt;Step 10 Predict&lt;/h2&gt;

&lt;p&gt;Items similar to i3&lt;/p&gt;

&lt;h4 id=&#34;linux-mac-osx&#34;&gt;Linux, Mac OSX&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;curl -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;{ &amp;quot;items&amp;quot;: [&amp;quot;i3&amp;quot;], &amp;quot;num&amp;quot;: 4 }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
   -k http://rd-pio-engine-1.herokuapp.com/queries.json
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;windows-2&#34;&gt;Windows&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;curl -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; ^
    -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{\&amp;quot;items\&amp;quot;: [\&amp;quot;i3\&amp;quot;], \&amp;quot;num\&amp;quot;: 4 }&amp;quot;&lt;/span&gt; ^
    -k http://rd-pio-engine-1.herokuapp.com/queries.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Response will be similar to the listing below&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;itemScores&amp;quot;&lt;/span&gt;:
  [
    {
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;i44&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #40a070&#34;&gt;0.2805472425881496&lt;/span&gt;
    },
    
    {
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;i41&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #40a070&#34;&gt;0.14458527026450552&lt;/span&gt;
    }
  ]
}
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Build a Recommendation Engine with PredictionIO : Local</title>
      <link>http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/index_local/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/index_local/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pre-requisities&#34;&gt;Pre-requisities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#source-code&#34;&gt;Source Code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#clone-the-source-code&#34;&gt;Clone the Source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#start-the-postgresql-9-6-server&#34;&gt;Start the PostgreSQL 9.6 server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run-the-event-server&#34;&gt;Run the Event Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-an-event-application&#34;&gt;Create an Event Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-demo-data-using-curl&#34;&gt;Add Demo Data using curl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#train-the-model&#34;&gt;Train the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#predict-recommended-items&#34;&gt;Predict Recommended Items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this workshop you will learn how to use PredictionIO Machine Learning library to build a recommendation engine based on Alternative Least Square Algorithm. PredictionIO uses Spark MLlib&amp;rsquo;s implementation and provide convenient APIs and REST endpoints to get the infrastructure up and running fast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/images/recommendation_engine_local.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;pre-requisities&#34;&gt;Pre-requisities&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;git command line tool&lt;/li&gt;
&lt;li&gt;JDK 1.8.x or above&lt;/li&gt;
&lt;li&gt;PostgreSQL 9.6 or above&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;Source code of this workshop resides in two repos listed below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rajdeepd/pio-eventserver-heroku&#34;&gt;https://github.com/rajdeepd/pio-eventserver-heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rajdeepd/pio-engine-heroku&#34;&gt;https://github.com/rajdeepd/pio-engine-heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;pio-eventserver-heroku&lt;/strong&gt; : Provdes storage for events being generated based on which we want to create our training model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pio-engine-heroku&lt;/strong&gt; : Engine wraps the ALS Algorithm implementation and provides APIs to create a model, train it and use it to make prediction.&lt;/p&gt;

&lt;p&gt;We will be using PostgreSQL database for this workshop.&lt;/p&gt;

&lt;h2 id=&#34;step-1-clone-the-source-code&#34;&gt;Step 1 : Clone the Source code&lt;/h2&gt;

&lt;p&gt;Clone the source code&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git clone https://github.com/rajdeepd/pio-eventserver-heroku
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git clone https://github.com/rajdeepd/pio-engine-heroku
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-2-start-the-postgresql-9-6-server&#34;&gt;Step 2 : Start the PostgreSQL 9.6 server&lt;/h2&gt;

&lt;p&gt;Make sure PostgreSQL server is running locally&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;sudo service postgresql status
9.3/main &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;port 5432&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;: online
9.4/main &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;port 5433&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;: online
9.5/main &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;port 5434&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;: online
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a pio role with password pio in PostgreSQL&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;psql

&lt;span style=&#34;color: #bb60d5&#34;&gt;ubuntu&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;# CREATE USER pio WITH PASSWORD &amp;#39;pio&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-3-run-the-event-server&#34;&gt;Step 3 : Run the Event Server&lt;/h2&gt;

&lt;p&gt;Use the following command to run the Event Server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020&#34;&gt;source &lt;/span&gt;bin/env.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./sbt run
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-4-create-an-event-application&#34;&gt;Step 4 : Create an Event Application&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020&#34;&gt;source &lt;/span&gt;bin/env.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./sbt &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;runMain io.prediction.tools.console.Console app new MyApp1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output of the command above will generate information about accesskey. We will be using this Access Key later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;App&lt;span style=&#34;color: #bb60d5&#34;&gt;$]&lt;/span&gt; Initialized Event Store &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; this app ID: 4.
&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;App&lt;span style=&#34;color: #bb60d5&#34;&gt;$]&lt;/span&gt; Created new app:
&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;App&lt;span style=&#34;color: #bb60d5&#34;&gt;$]&lt;/span&gt;       Name: MyApp1
&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;App&lt;span style=&#34;color: #bb60d5&#34;&gt;$]&lt;/span&gt;         ID: 4
&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;App&lt;span style=&#34;color: #bb60d5&#34;&gt;$]&lt;/span&gt; Access Key: zFqcHJF...Tv-M61CjWcW6IA0IuqXEVRP_zKT3
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see the pio app related data and meta data tables being created in PostgreSQL&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;psql -h 127.0.0.1 -U pio -W
Password &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; user pio: 
psql &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;9.5.3, server 9.3.9&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
SSL connection &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;protocol: TLSv1.2, cipher: ..., bits: 256, compression: off&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
Type &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; help.

&lt;span style=&#34;color: #bb60d5&#34;&gt;pio&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\d&lt;/span&gt;+
                                  List of relations
 Schema |             Name             |   Type   | Owner |    Size    | 
--------+------------------------------+----------+-------+------------+-
 public | pio_event_1                  | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;16&lt;/span&gt; kB      | 
 public | pio_meta_accesskeys          | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;16&lt;/span&gt; kB      | 
 public | pio_meta_apps                | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;16&lt;/span&gt; kB      | 
 public | pio_meta_apps_id_seq         | sequence | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;8192&lt;/span&gt; bytes | 
 public | pio_meta_channels            | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;8192&lt;/span&gt; bytes | 
 public | pio_meta_channels_id_seq     | sequence | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;8192&lt;/span&gt; bytes | 
 public | pio_meta_engineinstances     | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;64&lt;/span&gt; kB      | 
 public | pio_meta_enginemanifests     | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;16&lt;/span&gt; kB      | 
 public | pio_meta_evaluationinstances | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;8192&lt;/span&gt; bytes | 
 public | pio_model_models             | table    | pio   | &lt;span style=&#34;color: #40a070&#34;&gt;16&lt;/span&gt; kB      | 
&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;11&lt;/span&gt; rows&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #bb60d5&#34;&gt;pio&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;pio&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;select&lt;/span&gt; * from pio_meta_apps;
 id |  name  | description 
----+--------+-------------
  &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; | MyApp1 | 
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;step-5-add-demo-data-using-curl&#34;&gt;Step 5 : Add Demo Data using curl&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;ACCESS_KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;lt;YOUR ACCESS KEY&amp;gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;1..5&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt; curl -i -X POST http://localhost:7070/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ACCESS_KEY&lt;/span&gt; -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;\$set\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;user\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;u&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot; }&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;1..50&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt; curl -i -X POST http://localhost:7070/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ACCESS_KEY&lt;/span&gt; -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;\$set\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;item\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;i&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot;, \&amp;quot;properties\&amp;quot; : { \&amp;quot;categories\&amp;quot; : [\&amp;quot;c1\&amp;quot;, \&amp;quot;c2\&amp;quot;] } }&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;1..5&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt; curl -i -X POST http://localhost:7070/events.json?accessKey&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ACCESS_KEY&lt;/span&gt; -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;{ \&amp;quot;event\&amp;quot; : \&amp;quot;view\&amp;quot;, \&amp;quot;entityType\&amp;quot; : \&amp;quot;user\&amp;quot;, \&amp;quot;entityId\&amp;quot; : \&amp;quot;u&lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot;,  \&amp;quot;targetEntityType\&amp;quot; : \&amp;quot;item\&amp;quot;, \&amp;quot;targetEntityId\&amp;quot; : \&amp;quot;i&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;$((&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt; RANDOM &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;\&amp;quot; }&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check the data generated using the following curl command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:7070/events.json?accessKey=&amp;amp;limit=-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/images/localhost_events.png&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-6-train-the-model&#34;&gt;Step 6 : Train the Model&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set your PredictionIO app&amp;rsquo;s access key and app name in your env vars:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #007020&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;ACCESS_KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;lt;YOUR ACCESS KEY&amp;gt;
 &lt;span style=&#34;color: #007020&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;APP_NAME&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;lt;YOUR APP NAME&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: These values come from the apps defined in your event server.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Train the app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #007020&#34;&gt;source &lt;/span&gt;bin/env.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./sbt &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;runMain TrainApp&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020&#34;&gt;source &lt;/span&gt;bin/env.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./sbt &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;runMain ServerApp&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check the status of your engine at &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.sfdcworkshop.com/workshop/prediction-io/recommendation_engine/images/pio-engine-recommendation-local.png&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;step-7-predict-recommended-items&#34;&gt;Step 7 : Predict Recommended Items&lt;/h2&gt;

&lt;p&gt;Let us look at recommendation for other items based on a  item already bought by the user. Make sure by looking at the events in the event server that this item was bought, else recommended items will be empty list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;curl -H &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;{ &amp;quot;items&amp;quot;: [&amp;quot;i3&amp;quot;], &amp;quot;num&amp;quot;: 4 }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
    http://localhost:8000/queries.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Response&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;itemScores&amp;quot;&lt;/span&gt;:
  [
    {
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;i44&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #40a070&#34;&gt;0.2805472425881496&lt;/span&gt;
    },
    
    {
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;i41&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #40a070&#34;&gt;0.14458527026450552&lt;/span&gt;
    }
  ]
}
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Build a Suggestion Box App with Lightning Components</title>
      <link>http://www.sfdcworkshop.com/workshop/suggestion-box/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/suggestion-box/</guid>
      <description>

&lt;h2 id=&#34;table-of-content&#34;&gt;Table of Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-a-custom-domain-to-your-org-with-my-domain&#34;&gt;Add a Custom Domain to Your Org with My Domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-server-side-apex-controller-class&#34;&gt;Create a Server-side Apex Controller Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-the-suggestionboxapp-application&#34;&gt;Create the SuggestionBoxApp Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-the-suggestionboxcreate-component&#34;&gt;Create the SuggestionBoxCreate Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-the-skchange-event-and-searchbar-component&#34;&gt;Create the SKChange Event and SearchBar Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-the-suggestionlist-component&#34;&gt;Create the SuggestionList Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-the-suggestiondetails-component&#34;&gt;Create the SuggestionDetails Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this project, you learn how to build a Lightning Application on App Cloud from start to finish.If you&amp;rsquo;re new to App Cloud, the goal is to introduce you to the basics of app building together with introduction to the new lightning platform and basics to develop application using lightning components.
If you&amp;rsquo;re familiar with the App Cloud Admin features—managing users and security, customizing standard objects, and so on—the goal is to apply those skills to developing new application and learn how to extend the functionality of these applications using lightning.&lt;/p&gt;

&lt;p&gt;You need a Developer Edition org to complete this project. If you don&amp;rsquo;t have one, you can sign up &lt;a href=&#34;https://developer.salesforce.com/signup&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will build a Suggestion Box Lightning Application that allows employees to submit suggestions, search for existing suggestions and vote for them. All of this with the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install the pre-created building blocks of the Suggestion Box App by clicking &lt;a href=&#34;http://bit.ly/df16_sb_package&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://sforce.co/2dH9lZJ&#34;&gt;here&lt;/a&gt;
These packages include the app definition, data model, validation rules, process and reports and dashboard which together form the basic Suggestion box Application.
Steps to install an unmanaged package are detailed &lt;a href=&#34;https://help.salesforce.com/apex/HTViewHelpDoc?id=distribution_installing_packages.htm&#34;&gt;here&lt;/a&gt;. You can install this app for &lt;strong&gt;Admins only&lt;/strong&gt; for now.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extend this application using Lightning components to design a stand-alone Suggestion Box Application which will look something like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/SB_app.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Each rectangle in this image represents a lightning component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Displays the &amp;ldquo;add suggestion&amp;rdquo; functionality&lt;/li&gt;
&lt;li&gt;Displays the &amp;ldquo;search suggestion&amp;rdquo; functionality&lt;/li&gt;
&lt;li&gt;Displays the &amp;ldquo;results&amp;rdquo; of the search functionality&lt;/li&gt;
&lt;li&gt;Displays the &amp;ldquo;details of the selected record&amp;rdquo; in the search functionality&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Suggeston Box&amp;rdquo; Lightning Application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s begin with exploring our prebuilt Suggestion Box App which was installed using the package.&lt;/p&gt;

&lt;p&gt;All eyes on the screen!&lt;/p&gt;

&lt;p&gt;Now, that we know and understand how we can build a basic application using point-and-click, let us now extend this app using lightning components.The UI of the Application we will create will resemble the Lightning Experience UI as we will make use of Salesforce Lightning Design System.&lt;/p&gt;

&lt;h2 id=&#34;add-a-custom-domain-to-your-org-with-my-domain&#34;&gt;Add a Custom Domain to Your Org with My Domain&lt;/h2&gt;

&lt;p&gt;To use Lightning Components, your organization needs to have a custom domain configured using My Domain.&lt;/p&gt;

&lt;p&gt;To provide world class security for apps, we’re requiring that all users of Lightning Components use My Domain, just as we do for other advanced features, such as Salesforce Identity. If you want to use Lightning Components in Lightning tabs, Lightning Pages, or as standalone apps, you must enable My Domain in your org.&lt;/p&gt;

&lt;h4 id=&#34;enable-my-domain-in-your-org&#34;&gt;Enable My Domain in Your Org&lt;/h4&gt;

&lt;p&gt;Set up a custom domain with the Salesforce My Domain feature to put your Lightning Components to work.
If you already have My Domain enabled in your Developer org, you can skip this section and the next one.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From &lt;strong&gt;Setup&lt;/strong&gt;, go to &lt;strong&gt;My Domain&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Enter the &lt;strong&gt;subdomain name&lt;/strong&gt; you want to use within the sample URL. For example, a company called Universal Containers wants to use the subdomain universalcontainers. The company’s login URL would be &lt;a href=&#34;https://universalcontainers.my.salesforce.com/&#34;&gt;https://universalcontainers.my.salesforce.com/&lt;/a&gt;. Your name can include up to 40 letters, numbers, and hyphens.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Check Availability&lt;/strong&gt;. If your name is already taken, choose a different one&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Terms and Conditions&lt;/strong&gt; to review your agreement, then select the checkbox&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Register Domain&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You receive an email when your domain name is ready for testing. It can take up to 3 minutes.&lt;/p&gt;

&lt;h4 id=&#34;roll-out-my-domain-to-your-org&#34;&gt;Roll Out My Domain to Your Org&lt;/h4&gt;

&lt;p&gt;After you set up your domain name, test it and then roll it out to your org. Even though you don&amp;rsquo;t have any users to deploy it to in your DE org, you must still roll out My Domain to make your custom Lightning components available in Lightning Pages, in the Lightning App Builder, and for standalone apps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test your domain login. From &lt;strong&gt;Setup&lt;/strong&gt;, go to  &lt;strong&gt;My Domain&lt;/strong&gt;, then &lt;strong&gt;Click here to login&lt;/strong&gt;. Or, log out of your DE org and log in to Salesforce using your custom domain name. You can click the login link in the activation email you received.&lt;/li&gt;
&lt;li&gt;Test the new domain name by clicking tabs and links. All pages now show your new domain name.&lt;/li&gt;
&lt;li&gt;To roll out the new domain name to your organization, from &lt;strong&gt;Setup&lt;/strong&gt;, go to &lt;strong&gt;My Domain&lt;/strong&gt; , Click on &lt;strong&gt;Deploy to Users&lt;/strong&gt; then select &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;create-a-server-side-apex-controller-class&#34;&gt;Create a Server-side Apex Controller Class&lt;/h2&gt;

&lt;p&gt;Create a class to access data from Suggestion custom object:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your DE environment, click Your &lt;strong&gt;Name | Developer Console&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;File | New | Apex Class&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For the class name, enter &lt;strong&gt;SuggestionController&lt;/strong&gt; and then click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;SuggestionController&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  	&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@AuraEnabled&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Suggestion__c&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;getSuggestions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;SELECT id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Status__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Category__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Description__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;	Implemented_Date__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; createdDate 
			FROM Suggestion__c 
			ORDER BY createdDate DESC&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
	  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@AuraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Suggestion__c &lt;span style=&#34;color: #06287e&#34;&gt;saveSuggestion&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Suggestion__c suggestion&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        upsert suggestion&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; suggestion&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@AuraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Suggestion__c&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;SELECT id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Description__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Vote_up__c FROM Suggestion__c LIMIT &lt;span style=&#34;color: #40a070&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@AuraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Suggestion__c&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;findByName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String searchKey&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        String name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; searchKey &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;SELECT id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Description__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Vote_up__c FROM Suggestion__c WHERE name LIKE &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;name LIMIT &lt;span style=&#34;color: #40a070&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
   
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@AuraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Suggestion__c &lt;span style=&#34;color: #06287e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String suggestionId&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;SELECT id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Status__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Category__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Description__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;Vote_up__c
                    FROM Suggestion__c WHERE Id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;suggestionId&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@AuraEnabled&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Suggestion__c &lt;span style=&#34;color: #06287e&#34;&gt;voteSuggestion&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String suggestionId&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Suggestion__c s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Suggestion__c&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        s&lt;span style=&#34;color: #666666&#34;&gt;=[&lt;/span&gt;SELECT id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Status__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Category__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Suggestion_Description__c&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;Vote_up__c
                    FROM Suggestion__c WHERE Id &lt;span style=&#34;color: #666666&#34;&gt;=:&lt;/span&gt;suggestionId&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
        
        s&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Vote_up__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Vote_up__c&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        upsert s&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;@AuraEnabled enables client and server-side access to the controller method. Select &lt;strong&gt;File | Save&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-suggestionboxapp-application&#34;&gt;Create the SuggestionBoxApp Application&lt;/h2&gt;

&lt;p&gt;This application holds all the components we will create in th next steps together to make it a stand-alone application.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Developer Console&lt;/strong&gt;, select &lt;strong&gt;File | New | Lightning Application&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For the component name, enter &lt;strong&gt;SuggestionBoxApp&lt;/strong&gt; and then click &lt;strong&gt;Submit&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:application&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ltng:require&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;styles=&amp;quot;/resource/slds/assets/styles/salesforce-lightning-design-system-ltng.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;salesforce slds&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-grid slds-wrap slds-grid--pull-padded&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--4-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h3&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-section-title--divider  slds-text-align--center textsize&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;SUGGESTION BOX APPLICATION&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--4-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-grid&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                       &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SuggestionBoxCreate /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;
                       &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SearchBar /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-grid slds-grid--pull-padded&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                       &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SuggestionList /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                       &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SuggestionDetails /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--4-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h3&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-section-title--divider  slds-text-align--center textsize&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;@created by Salesforce Developer Relations Team&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-6&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:application&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how the application looks by clicking on the &lt;strong&gt;Preview&lt;/strong&gt; button, the first button in the application bundle.&lt;/p&gt;

&lt;h4 id=&#34;code-highlights&#34;&gt;Code Highlights:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This application uses lightning design system guidelines to create the UI as explained &lt;a href=&#34;https://www.lightningdesignsystem.com/components/utilities/grid/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-the-suggestionboxcreate-component&#34;&gt;Create the SuggestionBoxCreate Component&lt;/h2&gt;

&lt;p&gt;This component will implement the &lt;em&gt;Add Suggestion&lt;/em&gt; functionality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/Addsuggestion.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;A lightning component is a combination of markup, JavaScript, and CSS. You first create a component bundle.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Developer Console&lt;/strong&gt;, select &lt;strong&gt;File | New | Lightning Component&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For the component name, enter &lt;strong&gt;SuggestionBoxCreate&lt;/strong&gt; and then click &lt;strong&gt;Submit&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;controller=&amp;quot;SuggestionController&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ltng:require&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;styles=&amp;quot;{!$Resource.slds + &amp;#39;assets/styles/salesforce-lightning-design-system-vf.css&amp;#39;}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;suggestions&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Suggestion__c[]&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;newSuggestion&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Suggestion__c&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #4070a0&#34;&gt;default=&amp;quot;{ &amp;#39;sobjectType&amp;#39;: &amp;#39;Suggestion__c&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color: #4070a0&#34;&gt;      &amp;#39;Name&amp;#39;: &amp;#39;&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color: #4070a0&#34;&gt;      &amp;#39;Status__c&amp;#39;: &amp;#39;&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color: #4070a0&#34;&gt;      &amp;#39;Suggestion_Category__c&amp;#39;: &amp;#39;&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;color: #4070a0&#34;&gt;      &amp;#39;Suggestion_Description__c&amp;#39;: &amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #4070a0&#34;&gt;      }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/aura:attribute&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
         Add Suggestions
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;style=&amp;quot;margin-left: 0; height: 30px; float: right; margin-top: -3px; margin-right: 0; auto; vertical-align: inherit;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;addbutton&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;New&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;labelClass=&amp;quot;assistiveText&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;myButton&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.addNew}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- Input Form using components --&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;formbox&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;myboxhidden&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;sugname&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Suggestion Name&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;form-control&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newSuggestion.Name}&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;placeholder=&amp;quot;Suggestion Name&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelect&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;category&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Suggestion Category&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;cExpenseForm form-control&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newSuggestion.Suggestion_Category__c}&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;required=&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Customer Service&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;Customer Service&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Employee Services&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;Employee Services&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Facilities/ IT&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;Facilities/ IT&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Kitchen Snacks&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;Implemented&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputSelectOption&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;text=&amp;quot;Others&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;Implemented&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ui:inputSelect&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:inputText&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;aura:id=&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Suggestion Description&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;cExpenseForm form-control&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!v.newSuggestion.Suggestion_Description__c}&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #4070a0&#34;&gt;placeholder=&amp;quot;Describe your suggestion here&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ui:button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;label=&amp;quot;Submit&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;press=&amp;quot;{!c.createSuggestion}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the button panel on the right, click &lt;strong&gt;Controller&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  ({
   addNew&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) 
    			{
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; el &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;formbox&amp;#39;&lt;/span&gt;);
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; ($A.util.hasClass(el.getElement(), &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;myboxhidden&amp;#39;&lt;/span&gt;)) 
                {
                helper.showInput(component);
				} 
                    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;else&lt;/span&gt; {
				helper.hideInput(component);
						 }
				},
                
    createSuggestion&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) 
    			{
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; newSuggestion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.newSuggestion&amp;quot;&lt;/span&gt;);
                helper.createSuggestion(component, newSuggestion);
				}
}) 
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the button panel on the right, click &lt;strong&gt;Helper&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    showInput&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; el &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;formbox&amp;#39;&lt;/span&gt;);
        $A.util.removeClass(el.getElement(), &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;myboxhidden&amp;#39;&lt;/span&gt;);
        $A.util.addClass(el.getElement(), &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;mybox&amp;#39;&lt;/span&gt;);
    },

    hideInput&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; el &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.find(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;formbox&amp;#39;&lt;/span&gt;);
        $A.util.addClass(el.getElement(), &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;myboxhidden&amp;#39;&lt;/span&gt;);
    },

    createSuggestion&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, suggestion) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;.upsertSuggestion(component, suggestion, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(a) {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; suggestions &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.suggestions&amp;quot;&lt;/span&gt;);
            suggestions.unshift(a.getReturnValue());
            component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.suggestions&amp;quot;&lt;/span&gt;, suggestions);
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;.hideInput(component);
        });
    },
    upsertSuggestion&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, suggestion, callback) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.saveSuggestion&amp;quot;&lt;/span&gt;);
        action.setParams({
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;suggestion&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; suggestion
        });
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (callback) {
            action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, callback);
        }
        $A.enqueueAction(action);
    }

})
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the button panel on the right, click &lt;strong&gt;Style&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;h3&lt;/span&gt; {
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0px&lt;/span&gt;;
}
&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;h1&lt;/span&gt; {
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;24pt&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-left&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;35px&lt;/span&gt;;
    
}

&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS.container&lt;/span&gt; {
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;black&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;radius&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color: #40a070&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;198&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;198&lt;/span&gt;);
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;18pt&lt;/span&gt;;
}

&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.form-control&lt;/span&gt; {
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;block&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;100%&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;34px&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;6px&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;14px&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;14px&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;line-height&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;42857143&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;#000000&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;#ffffff&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;none&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;#cfd0d2&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;radius&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;4px&lt;/span&gt;;
    &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;webkit&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;shadow&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;inset&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1px&lt;/span&gt; rgba(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;075&lt;/span&gt;);
    box&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;shadow&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;inset&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1px&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1px&lt;/span&gt; rgba(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;075&lt;/span&gt;);
    &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;webkit&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;transition&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border-color&lt;/span&gt; ease&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;out &lt;span style=&#34;color: #40a070&#34;&gt;.15s&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; box&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;shadow ease&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;out &lt;span style=&#34;color: #40a070&#34;&gt;.15s&lt;/span&gt;;
    &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;o&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;transition&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border-color&lt;/span&gt; ease&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;out &lt;span style=&#34;color: #40a070&#34;&gt;.15s&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; box&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;shadow ease&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;out &lt;span style=&#34;color: #40a070&#34;&gt;.15s&lt;/span&gt;;
    transition&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border-color&lt;/span&gt; ease&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;out &lt;span style=&#34;color: #40a070&#34;&gt;.15s&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; box&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;shadow ease&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;in&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;out &lt;span style=&#34;color: #40a070&#34;&gt;.15s&lt;/span&gt;;
}

&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.myButton&lt;/span&gt; {
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;35px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #c65d09&#34;&gt;url(/resource/plusbutton)&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-repeat&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;no-repeat&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;35px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; contain;
	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/*margin-left: -50px;*/&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;border-style&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;none&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;transparent&lt;/span&gt;;
}

&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.img&lt;/span&gt; {
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #c65d09&#34;&gt;url(/resource/plusbutton/)&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;no-repeat&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;50px&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;25px&lt;/span&gt;;
}

&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS.mybox&lt;/span&gt; {
  &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/*display: block;*/&lt;/span&gt;
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;opacity&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-left&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;5px&lt;/span&gt;;
  transform&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; scale(&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;);
  transition&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; transform&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;height&lt;/span&gt;;
  transition&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;duration&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1s&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1s&lt;/span&gt;;
}

&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS.myboxhidden&lt;/span&gt; {
  &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/*display: none;*/&lt;/span&gt;
  transform&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; scale(&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/*opacity: 0;*/&lt;/span&gt;
  transition&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; transform&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;height&lt;/span&gt;;
  transition&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;duration&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1s&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1.2s&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;SuggestionBoxApp&lt;/strong&gt; Application and replace the below&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SuggestionBoxCreate /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;c:SuggestionBoxCreate&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how the application looks by clicking on the &lt;strong&gt;Preview&lt;/strong&gt; button, the first button in the application bundle.&lt;/p&gt;

&lt;h4 id=&#34;code-highlights-1&#34;&gt;Code highlights:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lightning components can include regular HTML markup and other Lightning components&lt;/li&gt;
&lt;li&gt;The Server-side Apex Controller has methods which will be used by components to access and modify records in the database&lt;/li&gt;
&lt;li&gt;The controller in the Component bundle has javascript methods which use the component attributes and invoke server side controller    method to process data. &lt;em&gt;CreateSuggestion&lt;/em&gt; is one such method which invokes &lt;em&gt;savesuggestion&lt;/em&gt; method in the &lt;em&gt;SuggestionController&lt;/em&gt; apex class&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;newSuggestion&lt;/em&gt; attribute is defined to hold the new suggestion that will be created by employee via the form.&lt;/li&gt;
&lt;li&gt;{!v.newSuggestion.Name} is the Lightning data binding notation to take the name field as input from the user&lt;/li&gt;
&lt;li&gt;&lt;em&gt;.THIS&lt;/em&gt; in the CSS symbolises that the css written in the component bundle only applies to this specific component UI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-the-skchange-event-and-searchbar-component&#34;&gt;Create the SKChange Event and SearchBar Component&lt;/h2&gt;

&lt;p&gt;We are creating two components namely the SearchBar and SuggestionList which need to communicate with each other to implement the search functionality.When employee types the searchkey in the searchbar, the Suggestionlist component should be updated with relevant suggestions.This communication will happen using the Lightning Event.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Developer Console&lt;/strong&gt;, select &lt;strong&gt;File | New | Lightning Event&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For the event name, enter &lt;strong&gt;SKChange&lt;/strong&gt; and then click &lt;strong&gt;Submit&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:event&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;APPLICATION&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;searchKey&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;String&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:event&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;code-highlights-2&#34;&gt;Code highlights:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This event holds a single attribute named searchkey&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-the-searchbar-component&#34;&gt;Creating the SearchBar Component&lt;/h2&gt;

&lt;p&gt;This component will implement the &lt;em&gt;Search Suggestion&lt;/em&gt; functionality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/Searchbar.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Developer Console&lt;/strong&gt;, select &lt;strong&gt;File | New | Lightning Component&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For the component name, enter &lt;strong&gt;SearchBar&lt;/strong&gt; and then click &lt;strong&gt;Submit&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ltng:require&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;styles=&amp;quot;{!$Resource.slds + &amp;#39;assets/styles/salesforce-lightning-design-system-vf.css&amp;#39;}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:registerEvent&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;SKChange&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;c:SKChange&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-form-element&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-form-element__control&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;text-input-01&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-input textfont&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;onkeyup=&amp;quot;{!c.searchKeyChange}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;placeholder=&amp;quot;Search for Suggestions&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the button panel on the right, click &lt;strong&gt;Controller&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    searchKeyChange&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; myEvent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $A.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;e.c:SKChange&amp;quot;&lt;/span&gt;);
        myEvent.setParams({&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;searchKey&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; event.target.value});
        myEvent.fire();
    }
})
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the button panel on the right, click &lt;strong&gt;Style&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.THIS&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.textfont&lt;/span&gt;{
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;Salesforce Sans&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Arial&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;sans-serif&lt;/span&gt;;   
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;15pt&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Open the &lt;strong&gt;SuggestionBoxApp&lt;/strong&gt; Application  and replace the below:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SearchBar /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;c:SearchBar&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how the application looks by clicking on the &lt;strong&gt;Preview&lt;/strong&gt; button, the first button in the application bundle.&lt;/p&gt;

&lt;h4 id=&#34;code-highlights-3&#34;&gt;Code highlights:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;SearchBar&lt;/em&gt; component has a single input field where employee will type the searchkey and each key entered in this field will trigger the &lt;em&gt;searchKeyChange&lt;/em&gt; client-side controller function&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;searchKeyChange&lt;/em&gt; takes the event and sets the event parameter &lt;em&gt;searchKey&lt;/em&gt; as the input field&amp;rsquo;s value&lt;/li&gt;
&lt;li&gt;Once set, it fires the event for the registered listners can catch it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-the-suggestionlist-component&#34;&gt;Create the SuggestionList Component&lt;/h2&gt;

&lt;p&gt;This component will display the list of Suggestions based on the searchKey.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/Searchbar_searchlist.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Developer Console&lt;/strong&gt;, select &lt;strong&gt;File | New | Lightning Component&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For the component name, enter &lt;strong&gt;SuggestionList&lt;/strong&gt; and then click &lt;strong&gt;Submit&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;controller=&amp;quot;SuggestionController&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ltng:require&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;styles=&amp;quot;{!$Resource.slds +&amp;#39;assets/styles/salesforce-lightning-design-system-vf.css&amp;#39;}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;suggestions&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Suggestion__c[]&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;init&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!this}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.doInit}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;event=&amp;quot;c:SKChange&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.searchKeyChange}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot; salesforce slds&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-has-dividers--around-space&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:iteration&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;items=&amp;quot;{!v.suggestions}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;var=&amp;quot;suggestion&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;li&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile slds-tile--board&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h3&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;{! &amp;#39;#suggestion/&amp;#39; + suggestion.Id }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Name: {!suggestion.Name}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile__detail slds-text-body--small&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-text-heading--medium&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Description : {!suggestion.Suggestion_Description__c}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:iteration&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the button panel on the right, click &lt;strong&gt;Controller&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    doInit &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.findAll&amp;quot;&lt;/span&gt;);
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(a) {
            component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.suggestions&amp;quot;&lt;/span&gt;, a.getReturnValue());
        });
        $A.enqueueAction(action);
    },
    
    searchKeyChange&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event) {
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; searchKey &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.getParam(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;searchKey&amp;quot;&lt;/span&gt;);
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.findByName&amp;quot;&lt;/span&gt;);
    action.setParams({
      &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;searchKey&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; searchKey
    });
    action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(a) {
        component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.suggestions&amp;quot;&lt;/span&gt;, a.getReturnValue());
    });
    $A.enqueueAction(action);
	}
    
})
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;SuggestionBoxApp&lt;/strong&gt; Application and replace the below&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SuggestionList /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;c:SuggestionList&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how the application looks by clicking on the &lt;strong&gt;Preview&lt;/strong&gt; button, the first button in the application bundle.&lt;/p&gt;

&lt;h4 id=&#34;code-highlights-4&#34;&gt;Code highlights:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The controller assigned to the component refers to the server-side controller SuggestionController&lt;/li&gt;
&lt;li&gt;This component catches the SKChange Event and handles it with the &lt;code&gt;&amp;lt;aura:handler&amp;gt;&lt;/code&gt; tag triggering the client-side controller function &lt;em&gt;searchKeyChange&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The suggestions attribute is defined to hold the list of suggestion objects returned from the server&lt;/li&gt;
&lt;li&gt;The init handler is defined to execute some code when the component is initialized&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;aura:iteration&amp;gt;&lt;/code&gt; is used to iterate through the list of suggestions and create an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each suggestion&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;a href=&amp;quot;{! &#39;#suggestion/&#39; + suggestion.Id }&amp;quot;&amp;gt;&lt;/code&gt; anchor tag around the suggestion data is defined to set the page hashtag to #suggestion/ followed by the suggestion id. The SuggestionDetails component will use this hashtag to display suggestion details every time an employee selects a suggestion from the list&lt;/li&gt;
&lt;li&gt;We get the value of the searchKey and then invoke findByName() method in the SuggestionController Apex class&lt;/li&gt;
&lt;li&gt;A callback is used here as the call to the server is an asynchronous call. When this call returns some value, we assign the list of suggestions returned by findByName() to the component&amp;rsquo;s suggestions attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-the-suggestiondetails-component&#34;&gt;Create the SuggestionDetails Component&lt;/h2&gt;

&lt;p&gt;This component will display the details of the suggestion selected by the employee from the Suggestionlist Component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/Searchdetail.png&#34; width=&#34;90%&#34; height=&#34;90%&#34;/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Developer Console&lt;/strong&gt;, select &lt;strong&gt;File | New | Lightning Component&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For the component name, enter &lt;strong&gt;SuggestionDetails&lt;/strong&gt; and then click &lt;strong&gt;Submit&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:component&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;controller=&amp;quot;SuggestionController&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;implements=&amp;quot;flexipage:availableForAllPageTypes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ltng:require&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;styles=&amp;quot;{!$Resource.slds}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:attribute&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;suggestion&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;Suggestion__c&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;init&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;{!this}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.doInit}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:handler&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;event=&amp;quot;aura:locationChange&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;{!c.locationChange}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{! v.suggestion.Name !=null }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;details&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-has-dividers--around-space&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;li&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-item&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile slds-tile--board&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h3&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                     Suggestion Details
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-tile__detail slds-text-body--small&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-text-heading--medium&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                        {!v.suggestion.Name} 
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                        {!v.suggestion.Status__c} 
                        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                        {!v.suggestion.Suggestion_Category__c} 
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                        {!v.suggestion.Suggestion_Description__c} &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                        {!v.suggestion.Vote_up__c}
                        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{! v.suggestion.Name !=null }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; Votes
                        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;slds-truncate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;javascript:void(0);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                           &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;aura:if&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isTrue=&amp;quot;{! v.suggestion.Name !=null }&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
                              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;button&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;.slds-button--neutral&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;onclick=&amp;quot;{!c.voteup}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;Vote up&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                           &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                     &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
               &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:if&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/aura:component&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the button panel on the right, click &lt;strong&gt;Controller&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Replace the code with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;({
    locationChange&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event, helper) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; token &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.getParam(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;);
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (token &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;) {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (token.indexOf(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;suggestion/&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;) {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; suggestionId &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; token.substr(token.indexOf(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;);
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.findById&amp;quot;&lt;/span&gt;);
                action.setParams({
                    &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;suggestionId&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; suggestionId
                });
                action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(a) {
                    component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.suggestion&amp;quot;&lt;/span&gt;, a.getReturnValue());
                });
                $A.enqueueAction(action);
            }
        }
    },


    doInit&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event) {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; token &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.getParam(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;);
    },

    voteup&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(component, event) {

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; suggestionId &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; event.target.id;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; action &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;c.voteSuggestion&amp;quot;&lt;/span&gt;);
        action.setParams({
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;suggestionId&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; component.get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.suggestion.Id&amp;quot;&lt;/span&gt;)
        });
        action.setCallback(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt;(a) {
            component.set(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;v.suggestion&amp;quot;&lt;/span&gt;, a.getReturnValue());
        });
        $A.enqueueAction(action);
    }
})
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;strong&gt;File | Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Open the &lt;strong&gt;SuggestionBoxApp&lt;/strong&gt; Application  and replace the below&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- &amp;lt;c:SuggestionDetails /&amp;gt; to be uncommented after component creation --&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;c:SuggestionDetails&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how the &lt;strong&gt;FINAL&lt;/strong&gt; application looks by clicking on the &lt;strong&gt;Preview&lt;/strong&gt; button, the first button in the application bundle.&lt;/p&gt;

&lt;h4 id=&#34;code-highlights-5&#34;&gt;Code Highlights:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In the SuggestionList component we created, we wrapped each suggestion in the list with a &lt;code&gt;&amp;lt;a href=&amp;quot;{! &#39;#suggestion/&#39; + suggestion.Id }&amp;quot;&amp;gt;&lt;/code&gt; anchor tag that sets the page hashtag to #suggestion/ followed by the suggestion id of the clicked suggestion. In this component, the locationChange handler is defined to listen to hashtag changes, and execute the controller&amp;rsquo;s locationChange() when it happens. The locationChange() function implemented in the next step retrieves and displays the selected suggestion&lt;/li&gt;
&lt;li&gt;The button labeled as &lt;em&gt;Vote Up&lt;/em&gt; is used by employees to vote up a suggestion.The button when clicked triggers the voteup function in the client-side controller&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;locationChange&lt;/em&gt; function gets the new value of the hashtag which it then parses to extract the suggestion id and invokes the findById() method in the Apex controller SuggestionController. When the asynchronous call returns, it assigns the suggestion returned by findById() to the component&amp;rsquo;s suggestion attribute.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;voteup&lt;/em&gt; function calls the voteSuggestion method in the server-side controller and passes the suggestion id as the method parameter.When the asynchronous call returns, it assigns the suggestion returned by voteupSuggestion() to the component&amp;rsquo;s suggestion attribute thus updating the vote count&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Congratulations! You&amp;rsquo;ve become a Lightning application developer! You created and wired up events between multiple Lightning components. You created a suggestion box component that is built with other components. You have created and used a server-side controller for pulling data out of Salesforce as well as several client-side components to handle user interaction.&lt;/p&gt;

&lt;p&gt;These building blocks are used for creating every kind of Lighnting application!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Suggestion Box App with Lightning Experience</title>
      <link>http://www.sfdcworkshop.com/workshop/suggestion-box/index_v1/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/suggestion-box/index_v1/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-suggestion-box-app&#34;&gt;Creating a Suggestion Box App&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step-1-create-an-app-and-a-custom-object&#34;&gt;Create an App and a Custom Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-2-tour-the-app&#34;&gt;Tour the App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-custom-fields&#34;&gt;Adding Custom Fields&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step-1-add-a-description-field&#34;&gt;Add a Description field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-2-add-a-category-field&#34;&gt;Add a Category Field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-3-try-out-the-app&#34;&gt;Try Out the App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-4-viewing-objects-in-schema-builder&#34;&gt;Viewing Objects in Schema Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-5-add-a-status-field&#34;&gt;Add a Status field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-6-add-a-date-field&#34;&gt;Add a Date field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifying-the-user-experience&#34;&gt;Modifying the User Experience&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step-1-modify-the-page-layout&#34;&gt;Modify the Page Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-2-add-a-compact-layout&#34;&gt;Add a Compact Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-3-add-a-global-action&#34;&gt;Add a Global Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-business-logic&#34;&gt;Adding Business Logic&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step-1-add-a-formula-field&#34;&gt;Add a Formula Field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-2-add-a-validation-rule&#34;&gt;Add a Validation Rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-3-add-a-field-update-using-process-builder&#34;&gt;Add a Field Update Using Process Builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-reports-and-dashboards&#34;&gt;Creating Reports and Dashboards&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step-1-create-a-tabular-report&#34;&gt;Create a Tabular Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-2-create-a-summary-report-and-a-report-chart&#34;&gt;Create a Summary Report and a Report Chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step-3-create-a-dashboard&#34;&gt;Create a Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this project, you learn how to build an application on App Cloud from start to finish, without writing any code. If you&amp;rsquo;re new to App Cloud, the goal is to introduce you to the basics of app building. These point-and-click skills apply whether or not you plan to write code on the platform. If you&amp;rsquo;re familiar with the App Cloud Admin features—managing users and security, customizing standard objects, and so on—the goal is to apply those skills to developing new applications. You need a Developer Edition org to complete this project. If you don&amp;rsquo;t have one, you can sign up &lt;a href=&#34;https://developer.salesforce.com/signup&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will build a suggestion management app that allows employees to submit suggestions and track their status using these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the app definition and a data model for the application. This simple application requires only one custom object.&lt;/li&gt;
&lt;li&gt;Modify the user interface on the browser and on Salesforce1 Mobile using page layouts, compact layouts, and global actions.&lt;/li&gt;
&lt;li&gt;Automate calculations, data quality, and database updates to improve the user experience using formulas, validation rules, and a process builder.&lt;/li&gt;
&lt;li&gt;Define reports, charts, and dashboards to track the status of suggestions and analyze how well the company manages suggestions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Instead of creating a Suggestions custom object, you could use Cases, a Salesforce Service Cloud standard object. But in this example, we want to explore building a custom app without using Service Cloud.&lt;/p&gt;

&lt;h1 id=&#34;creating-a-suggestion-box-app&#34;&gt;Creating a Suggestion Box App&lt;/h1&gt;

&lt;h3 id=&#34;what-you-ll-do&#34;&gt;What You’ll Do&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a Force.com app that includes standard collaboration and analytics features.&lt;/li&gt;
&lt;li&gt;Familiarize yourself with the app’s user interface in the browser and in the Salesforce1 Mobile app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;step-1-create-an-app-and-a-custom-object&#34;&gt;Step 1: Create an App and a Custom Object&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Log in to your Developer Edition (DE) org using your username (in the form of an email address) and password.&lt;/li&gt;
&lt;li&gt;From the Force.com Home page, click on the gear icon | Setup Home | Platform Tools | Apps | Apps&lt;/li&gt;
&lt;li&gt;On the Apps page, click on the Quick Start button&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in the form as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App: Suggestion Box&lt;/li&gt;
&lt;li&gt;Label: Suggestion&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Plural Label: Suggestions&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/ScreenShot20160727at64217PM.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;App Quick Start&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click Create. Right away you see some of the functionality that’s automatically added.
    &lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Suggestion.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Suggestion app&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You’re all set! Close the popup and you can access the App you by clicking on the grid icon on the top right
    &lt;img src=&#34;https://github.com/sonamraju14/df16workshops/blob/master/content/workshop/suggestion-box/images/App_launcher.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Suggestion applauncher&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-2-tour-the-app&#34;&gt;Step 2: Tour the App&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step1.2.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;App Tour&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;App Launcher — Displays all a user&amp;rsquo;s available Salesforce apps, and any connected apps an administrator installs for the organization&lt;/li&gt;
&lt;li&gt;App Name — Displays the App Name you have navigated from the App Launcher&lt;/li&gt;
&lt;li&gt;Items — Displays the list of Tabs available inside the App&lt;/li&gt;
&lt;li&gt;Navigation menu — provides a streamlined and compact interface to navigate through your organization&amp;rsquo;s various apps and tabs&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-3-try-out-the-mobile-app&#34;&gt;Step 3: Try Out the Mobile App&lt;/h4&gt;

&lt;p&gt;When you create an app with App Cloud, you automatically create a mobile version of the app. You can access the Salesforce1 mobile app in a number of ways:
* As a downloadable mobile app (Salesforce1) that you install on your phone from the Apple AppStore or Google Play
* By navigating to login.salesforce.com using a mobile browser
* By using the Chrome Developer Tools&lt;/p&gt;

&lt;p&gt;For this step, we&amp;rsquo;ll use the last option.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a new tab in your Chrome browser and open the Developer Tools by clicking View | Developer | Developer Tools&lt;/li&gt;
&lt;li&gt;Click the Toggle Device Mode button to simulate your browser as a mobile device.
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Google page1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;To simulate the Salesforce1 app in your browser, copy and paste in the URL from the previous tab. Remove the part of the URL immediately after salesforce.com/. For example:
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Google page2&#34; /&gt;
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.3.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Google page3&#34; /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Append /one/one.app to the end of the URL after salesforce.com to start the Salesforce1 Application simulator. For example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.4.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Google page4&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the display is too small, change the size to 100%.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.5.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Google page5&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.6.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Dropdown&#34; /&gt; icon to open the left navigation bar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find the Suggestions object under Recent. You may need to click Show More to see it. Click Suggestions to display your recently viewed suggestions, if you have any.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click New to create a suggestion.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step1.3.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Create Suggestion&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter a sample suggestion (maybe something like &amp;ldquo;Locker Rooms&amp;rdquo;), and click Save.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With just one button click, you&amp;rsquo;re on your way to building a mobile app!&lt;/p&gt;

&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/starting_force_com/starting_intro&#34;&gt; Salesforce Platform Basics &amp;gt; Getting Started with the Platform &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/salesforce1_mobile_app/salesforce1_mobile_app_intro&#34;&gt; Salesforce1 Mobile Basics &amp;gt; Getting Started with the Salesforce1 Mobile App &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;adding-custom-fields&#34;&gt;Adding Custom Fields&lt;/h1&gt;

&lt;h3 id=&#34;what-you-ll-do-1&#34;&gt;What You’ll Do&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create custom fields with the Custom Field Wizard and the Schema Builder.&lt;/li&gt;
&lt;li&gt;Try the app in the browser and in the Salesforce1 Mobile app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step2a.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Create Suggestion field&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step2b.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Create Suggestion field&#34; /&gt;&lt;/p&gt;

&lt;p&gt;By default, your custom object has some standard fields on it. You need to add more fields to store relevant information about each suggestion. Fields can store many types of data. Feel free to explore these later as you extend your app. For now, let’s add a few that we know we need.&lt;/p&gt;

&lt;p&gt;You can add a new field this way from the Force.com Home Page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the Gear icon | Setup Home | Platform Tools | Objects and Fields | Object Manager&lt;/li&gt;
&lt;li&gt;Click the name of your object (in this example, click Suggestion)&lt;/li&gt;
&lt;li&gt;Scroll down to the Custom Fields &amp;amp; Relationships section.&lt;/li&gt;
&lt;li&gt;Click New.
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step2c.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Display Suggestion field&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step2e.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;New Custom field&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-1-add-a-description-field&#34;&gt;Step 1: Add a Description field&lt;/h4&gt;

&lt;p&gt;This field will be used by employees when they explain their suggestion. You’ll create the field as a rich text area so that they can change font styles, add pictures, etc.&lt;/p&gt;

&lt;p&gt;Create the Suggestion Description field as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For Data Type, select Text Area (Rich), and click Next.&lt;/li&gt;
&lt;li&gt;Fill in the custom field details:

&lt;ul&gt;
&lt;li&gt;Field Label: Suggestion Description&lt;/li&gt;
&lt;li&gt;Length: 32,768&lt;/li&gt;
&lt;li&gt;Visible Lines: 10&lt;/li&gt;
&lt;li&gt;Field Name: Suggestion_Description
Help Text: Please enter as much detail - including pictures - around this suggestion so we clearly understand your idea.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Next.&lt;/li&gt;
&lt;li&gt;Click Next again to accept the default field visibility and security settings.&lt;/li&gt;
&lt;li&gt;Click Save &amp;amp; New to add the Suggestion Description to the page layout, save the Suggestion Description field, and return to the first step of the wizard.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-2-add-a-category-field&#34;&gt;Step 2: Add a Category Field&lt;/h4&gt;

&lt;p&gt;This field will help us categorize each suggestion. It will also make it easier for us to report on what types of suggestions we get the most.&lt;/p&gt;

&lt;p&gt;Create the Suggestion Category field as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For Data Type, select Picklist, and click Next.&lt;/li&gt;
&lt;li&gt;Fill in the custom field details:

&lt;ul&gt;
&lt;li&gt;Field Label: Suggestion Category&lt;/li&gt;
&lt;li&gt;Check the radio button next to Enter values for the picklist, with each value separated by a new line.&lt;/li&gt;
&lt;li&gt;Enter the following values for the picklist (one per line)

&lt;ul&gt;
&lt;li&gt;Customer Service&lt;/li&gt;
&lt;li&gt;Employee Services&lt;/li&gt;
&lt;li&gt;Facilities/ IT&lt;/li&gt;
&lt;li&gt;Kitchen Snacks&lt;/li&gt;
&lt;li&gt;Other&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Leave the Sort Values Alphabetically - Unchecked.&lt;/li&gt;
&lt;li&gt;Leave the Use first value as default value - Unchecked.&lt;/li&gt;
&lt;li&gt;Leave the defaults for the remaining fields, and click Next.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Next again to accept the default field visibility and security settings.&lt;/li&gt;
&lt;li&gt;Click Save to add the Suggestion Category to the page layout and save the Suggestion Category field.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-3-try-out-the-app&#34;&gt;Step 3: Try Out the App&lt;/h4&gt;

&lt;p&gt;Check your work by returning to the Suggestions tab and clicking the New button. You should see that your two custom fields were added to the Suggestion page. Fill in a sample suggestion and click Save.&lt;/p&gt;

&lt;p&gt;Try adding a record in the Salesforce1 Mobile App, too. Note that the Suggestion page layout is the same on the browser as it is in the mobile app. That&amp;rsquo;s the power of &amp;ldquo;build once, deploy anywhere&amp;rdquo; metadata.&lt;/p&gt;

&lt;h4 id=&#34;step-4-viewing-objects-in-schema-builder&#34;&gt;Step 4: Viewing Objects in Schema Builder&lt;/h4&gt;

&lt;p&gt;Schema Builder provides a dynamic environment to add new custom objects, custom fields, and relationships to your Salesforce database. It also eliminates the need to click from page to page to add a new custom field to an object or to find the details of a relationship.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the Suggestion custom object in the Schema Builder.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the gear icon | Setup Home | Search for Schema Builder in the Quick Find on the left.&lt;/li&gt;
&lt;li&gt;From the Objects Palette (left-hand side) select the Suggestion object and the User object.&lt;/li&gt;
&lt;li&gt;If you don’t see your objects in the Canvas area, click Auto-Layout and drag them around until you like how they are arranged.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s add more fields so that you can track the progress of a Suggestion.&lt;/p&gt;

&lt;h4 id=&#34;step-5-add-a-status-field&#34;&gt;Step 5: Add a Status field&lt;/h4&gt;

&lt;p&gt;This field will help us track the status of the suggestion. It is also a way for the suggestor to know what is going on with their suggestion.
This field will have unique security around it in that only Admins can change the status.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the Elements tab in the left-hand side Palette. This displays all of the new things you can add to your database schema: objects and fields.&lt;/li&gt;
&lt;li&gt;Drag the Picklist field type and drop it on the Suggestions object.&lt;/li&gt;
&lt;li&gt;Fill in the custom field details:

&lt;ul&gt;
&lt;li&gt;Field Label: Status&lt;/li&gt;
&lt;li&gt;Field Name: Status&lt;/li&gt;
&lt;li&gt;Enter the following Values for the picklist (one per line)

&lt;ul&gt;
&lt;li&gt;New&lt;/li&gt;
&lt;li&gt;Under Consideration&lt;/li&gt;
&lt;li&gt;In Progress&lt;/li&gt;
&lt;li&gt;Implemented&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Leave the Sort Values Alphabetically - Unchecked.&lt;/li&gt;
&lt;li&gt;Check the Use first value as default value.&lt;/li&gt;
&lt;li&gt;Click Save to save the Status field. You should see the Status field at the top of the list of fields in the Suggestion object’s box in the schema diagram.&lt;/li&gt;
&lt;li&gt;Now, we&amp;rsquo;ll update the Status field&amp;rsquo;s security. While still in the Schema Builder, right-click on the Status field that you just added to the Suggestion object. Click Manage Field Permissions.&lt;/li&gt;
&lt;li&gt;Click the Read-Only checkbox at the top of the column to make this field read only for all users.&lt;/li&gt;
&lt;li&gt;Uncheck the box in the Read-Only column next to System Administrator, then click Save.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-6-add-a-date-field&#34;&gt;Step 6: Add a Date field&lt;/h4&gt;

&lt;p&gt;This field will help us track when the Suggestion was Implemented. It’s also important for us because we reference this field in the formula field created in a later exercise.&lt;/p&gt;

&lt;p&gt;This field will have unique security around it in that only Admins can change the date.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Drag the Date field type and drop it on the Suggestions object.&lt;/li&gt;
&lt;li&gt;Fill in the custom field details:

&lt;ul&gt;
&lt;li&gt;Field Label: Implemented Date&lt;/li&gt;
&lt;li&gt;Field Name: Implemented_Date&lt;/li&gt;
&lt;li&gt;Leave the defaults for the remaining fields&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Save to save the Implemented Date field. You should see the Implemented Date field at the top of the list of fields in the Suggestion object’s box in the schema diagram.&lt;/li&gt;
&lt;li&gt;Now, we&amp;rsquo;ll update the Implemented Date field&amp;rsquo;s security. While still in the Schema Builder, right-click on the Implemented Date field that you just added to the Suggestion object. Click Manage Field Permissions.&lt;/li&gt;
&lt;li&gt;Click the Read-Only checkbox at the top of the column to make this field read only for all users.&lt;/li&gt;
&lt;li&gt;Uncheck the box in the Read-Only column next to System Administrator, then click Save.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-7-try-out-the-app&#34;&gt;Step 7: Try Out the App&lt;/h4&gt;

&lt;p&gt;Go back to the Suggestions tab in the browser, or to the Suggestions object in the Salesforce1 Mobile app, and create a new Suggestion record.&lt;/p&gt;

&lt;p&gt;Notice anything? Where are our two new fields we just created, Status and Implemented Date?&lt;/p&gt;

&lt;p&gt;Don’t worry, they are there, just not on the page layout. When you use the Field Wizard, you have the option to add the field to the page layout automatically. When you use the Schema Builder, you need to add the field using the Page Layout Editor. In the next exercise, we’ll do that, and make some other modifications to the user experience, to make the app easier to use.&lt;/p&gt;

&lt;h4 id=&#34;resources-1&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/data_modeling/creating_custom_objects_fields&#34;&gt; Data Modeling &amp;gt; Creating Custom Objects and Fields &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/data_modeling/schema_builder&#34;&gt;Data Modeling &amp;gt; Working with Schema Builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;modifying-the-user-experience&#34;&gt;Modifying the User Experience&lt;/h1&gt;

&lt;h3 id=&#34;what-you-ll-do-2&#34;&gt;What You’ll Do&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Modify the page layout.&lt;/li&gt;
&lt;li&gt;Modify the mobile user interface with a compact layout.&lt;/li&gt;
&lt;li&gt;Add a global action to add suggestions directly from the Feed.&lt;/li&gt;
&lt;li&gt;Try the app in the browser or in the Salesforce1 Mobile app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the previous exercise you created fields to manage the data. Now, let’s make sure that employees have a great experience logging their Suggestions by arranging the fields in a usable manner, bringing the most important fields to their attention and making common tasks easy to do.&lt;/p&gt;

&lt;p&gt;Changing the UI for the browser and mobile pages involves modifying the Suggestion object&amp;rsquo;s page layout. You’ll also modify the Suggestion object&amp;rsquo;s compact layout, which changes only the mobile app UI. Finally, you’ll add a Global Action to make it easy for employees to add suggestions wherever they are in the Salesforce app in both the browser and the mobile app.&lt;/p&gt;

&lt;h4 id=&#34;step-1-modify-the-page-layout&#34;&gt;Step 1: Modify the Page Layout&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Click on the Gear icon | Setup Home | Platform Tools | Objects and Fields | Object Manager&lt;/li&gt;
&lt;li&gt;Click the name of your object (in this example, click Suggestion)&lt;/li&gt;
&lt;li&gt;Scroll down to the Page Layouts section, and click the Suggestion Layout name. The Page Layout Editor opens.&lt;/li&gt;
&lt;li&gt;Scroll down to the Suggestion Detail section.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step3.1.2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Suggestion Layout1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;In the Page Layout Editor, you have can have one or two columns in each section. Let’s add the missing fields and group fields together.

&lt;ul&gt;
&lt;li&gt;Click the Status field and drag it to the right column in the Information section, under Owner.&lt;/li&gt;
&lt;li&gt;Click the Implemented Date field and drag it to the right column in the Information section, under Status.&lt;/li&gt;
&lt;li&gt;Click Quick Save.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now add a new section and rearrange the remaining fields.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a section for Description. In the palette, click Section and drag it down until a green bar appears above the System Information section. Drop it there to create the section.&lt;/li&gt;
&lt;li&gt;In the Section Properties box, enter Description for the section name.&lt;/li&gt;
&lt;li&gt;Choose 1-column for the layout.&lt;/li&gt;
&lt;li&gt;Click OK.&lt;/li&gt;
&lt;li&gt;Drag the Suggestion Description field into your new section. Your page should look like this when finished.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step3.1.2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Suggestion Layout2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-2-add-a-compact-layout&#34;&gt;Step 2: Add a Compact Layout&lt;/h4&gt;

&lt;p&gt;Mobile app users can now see the Status and Implemented Date fields, but with a small screen size, it’s useful to display important fields at the top of the screen. For custom objects, the Name field displays at the top by default. To add the other fields, you modify the compact layout.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Gear icon | Setup Home | Platform Tools | Objects and Fields | Object Manager&lt;/li&gt;
&lt;li&gt;Click the name of your object (in this example, click Suggestion)&lt;/li&gt;
&lt;li&gt;Scroll down to the Compact Layouts section and click New.&lt;/li&gt;
&lt;li&gt;Enter the layout details.

&lt;ul&gt;
&lt;li&gt;Label: Suggestion&lt;/li&gt;
&lt;li&gt;Name: Suggestion&lt;/li&gt;
&lt;li&gt;Selected Fields: Suggestion Name, Suggestion Category, Status
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step3.2.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Compact Layout&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;li&gt;Click Compact Layout Assignment.&lt;/li&gt;
&lt;li&gt;Click Edit Assignment.&lt;/li&gt;
&lt;li&gt;Select Suggestion as the primary compact layout.&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-3-add-a-global-action&#34;&gt;Step 3: Add a Global Action&lt;/h4&gt;

&lt;p&gt;Things are looking pretty good, but from talking to employees about how they work, we’ve found that they think of suggestions while they’re doing other tasks and don’t want to leave what they are doing to submit a suggestion. For example, if an employee is entering a contact name and thought of a customer service suggestion, the employee would have to do the following to enter a suggestion:
* Navigate to the Suggestion object
* Click New
* Fill in the Suggestion information
* Save
* Navigate back to the Contact record
* Try to remember what they were doing!&lt;/p&gt;

&lt;p&gt;You want to make it easier for employees by reducing the number of clicks and keeping them in context. You can do this with a Global Action.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the gear icon | Setup Home&lt;/li&gt;
&lt;li&gt;Search for Global Actions in the Quick Find on the left, choose Global Actions from the result&lt;/li&gt;
&lt;li&gt;Click New Action.&lt;/li&gt;
&lt;li&gt;Enter the action details.

&lt;ul&gt;
&lt;li&gt;Action Type: Create a Record&lt;/li&gt;
&lt;li&gt;Target Object: Suggestion&lt;/li&gt;
&lt;li&gt;Standard Label Type: New [Record]&lt;/li&gt;
&lt;li&gt;Name: New_Suggestion&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn2.3.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Create a record&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Save. This takes you to the Global Action layout so that you can select the fields to display when the action is selected.&lt;/li&gt;
&lt;li&gt;Drag Suggestion Category and Suggestion Description onto the New Suggestion layout so that employees can enter those values when creating a suggestion.&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step3.3.2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Global Action&#34; /&gt;&lt;/li&gt;
&lt;li&gt;In the Predefined Field Values section, click New.&lt;/li&gt;
&lt;li&gt;Enter the predefined field value details.

&lt;ul&gt;
&lt;li&gt;Field Name: Status&lt;/li&gt;
&lt;li&gt;A specific value: New&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Save. You have created a new action, but users cannot see it yet! Let&amp;rsquo;s fix that next.&lt;/li&gt;
&lt;li&gt;Click the gear icon | Setup Home | Platform Tools | User Interface | Global Actions | Publisher Layouts&lt;/li&gt;
&lt;li&gt;Next to Global Layout, click Edit.&lt;/li&gt;
&lt;li&gt;Drag the New Suggestion action into the Quick Actions in the Publisher section and drop it in the second position, after Post.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn2.3.3.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Global Layout&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-4-try-out-the-app&#34;&gt;Step 4: Try Out the App&lt;/h4&gt;

&lt;p&gt;In the Suggestions tab, click New and fill out a suggestion. Notice how the experience has changed in the page layout. Switch to the mobile experience and add a suggestion from the mobile navigation menu. You should see the page layout changes and the new fields at the top of the screen from the compact layout change. Finally, add a suggestion from the Feed in the mobile app. Does the global action make it easier? If so, consider updating the page layouts for specific objects (like Contact) to add the New Suggestion action to the action bars that display when viewing those records.&lt;/p&gt;

&lt;h4 id=&#34;resources-2&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/customizing_user_interface/ui_page_layouts&#34;&gt;UI Customization &amp;gt; Modifying Page Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/salesforce1_mobile_app/salesforce1_mobile_app_compact_layouts&#34;&gt;Salesforce1 Mobile Basics &amp;gt; Customizing Compact Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/salesforce1_mobile_app/salesforce1_mobile_app_actions_global&#34;&gt;Salesforce1 Mobile Basics &amp;gt; Creating Global Quick Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/salesforce1_mobile_app/salesforce1_mobile_app_actions_objectspecific&#34;&gt;Salesforce1 Mobile Basics &amp;gt; Creating Object-Specific Quick Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;adding-business-logic&#34;&gt;Adding Business Logic&lt;/h1&gt;

&lt;h3 id=&#34;what-you-ll-do-3&#34;&gt;What You’ll Do&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a custom formula field to calculate the length of time between two dates.&lt;/li&gt;
&lt;li&gt;Add a validation rule to enforce that the implemented date is not in the future.&lt;/li&gt;
&lt;li&gt;Create a process to update a field when the value of another field changes.&lt;/li&gt;
&lt;li&gt;Try the app in the browser or Salesforce1 Mobile app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, your app lets employees securely enter and view data about suggestions on a browser or a mobile device. That’s pretty cool, but let’s make the platform work a little harder for us so that our users don’t have to.&lt;/p&gt;

&lt;h4 id=&#34;step-1-add-a-formula-field&#34;&gt;Step 1: Add a Formula Field&lt;/h4&gt;

&lt;p&gt;A formula field derives its value from other fields, expressions, or values, saving your users a lot of time. Let’s add a formula field to calculate the number of days from suggestion creation to implementation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Gear icon | Setup Home | Platform Tools | Objects and Fields | Object Manager | Suggestion&lt;/li&gt;
&lt;li&gt;In the Custom Fields &amp;amp; Relationships section, click New.&lt;/li&gt;
&lt;li&gt;For the data type, select Formula and click Next.&lt;/li&gt;
&lt;li&gt;Enter the field details, and then click Next.

&lt;ul&gt;
&lt;li&gt;Field Label: Number of Days Open&lt;/li&gt;
&lt;li&gt;Formula Return Type: Number&lt;/li&gt;
&lt;li&gt;Decimal Places: 0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click the Advanced Formula tab.&lt;/li&gt;
&lt;li&gt;In the Formula Editor, type the following formula: IF(ISBLANK(Implemented_Date&lt;strong&gt;c), TODAY() - DATEVALUE(CreatedDate), Implemented_Date&lt;/strong&gt;c - DATEVALUE(CreatedDate))
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/SuggestionFormula.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Formula field&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Click Next and Next again to accept the default field visibility and security settings.&lt;/li&gt;
&lt;li&gt;Click Save to save the Number of Days Open field and add it to the Suggestion layout.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-2-add-a-validation-rule&#34;&gt;Step 2: Add a Validation Rule&lt;/h4&gt;

&lt;p&gt;Formulas are also used to ensure data quality and enforce business rules. Our employees cannot predict the future, so let’s create a validation rule to make sure that they don’t enter implementation dates that haven’t happened yet. With validation rules, you define the condition for &amp;ldquo;bad&amp;rdquo; data. When the system evaluates the rule, it blocks the user from saving the data if the condition is true.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Gear icon | Setup Home | Platform Tools | Objects and Fields | Object Manager | Suggestion&lt;/li&gt;
&lt;li&gt;Scroll down to the Validation Rules section and click New.&lt;/li&gt;
&lt;li&gt;Enter the rule details.

&lt;ul&gt;
&lt;li&gt;Rule Name: Date_in_Range&lt;/li&gt;
&lt;li&gt;Formula editor:

&lt;ul&gt;
&lt;li&gt;Implemented_Date__c &amp;gt; TODAY()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Error Message: The implementation date must be today or in the past, not in the future.&lt;/li&gt;
&lt;li&gt;Error Location: Field, Implemented Date&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/SuggestionVR.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Validation rule&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-3-add-a-field-update-using-process-builder&#34;&gt;Step 3: Add a Field Update Using Process Builder&lt;/h4&gt;

&lt;p&gt;Formulas are also useful when automating business processes. Let’s make it easy on the person who has to act on all the suggestions by saving them some time. When a user adds an implemented date, let’s update the status automatically to Implemented.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From Setup Home, Go to Platform Tools | Process Automation | Process Builder&lt;/li&gt;
&lt;li&gt;On the Welcome page, click New.&lt;/li&gt;
&lt;li&gt;Enter the process details, and then click Save.

&lt;ul&gt;
&lt;li&gt;Process Name: Update Status&lt;/li&gt;
&lt;li&gt;API Name: Update_Status&lt;/li&gt;
&lt;li&gt;Description: Updates status to Implemented when Implemented Date field is populated.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Add Object and associate the process with the Suggestion object and specify when to start the process. For this process, select when the record is created or edited.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step4.3.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Process Builder&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;li&gt;Click Add Criteria.&lt;/li&gt;
&lt;li&gt;Name the criteria Implemented?.&lt;/li&gt;
&lt;li&gt;Select Formula evaluates to true.&lt;/li&gt;
&lt;li&gt;Check whether the Implemented Date field is populated by typing the following in the Formula Editor:NOT(ISBLANK( [Suggestion&lt;strong&gt;c].Implemented_Date&lt;/strong&gt;c ))&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/PB2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Process Builder1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Click Save.&lt;/li&gt;
&lt;li&gt;Click Add Action.&lt;/li&gt;
&lt;li&gt;Enter the action details, and then click Choose.

&lt;ul&gt;
&lt;li&gt;Action Type: Update Records&lt;/li&gt;
&lt;li&gt;Action Name: Update Status to Implemented&lt;/li&gt;
&lt;li&gt;Record Type: click the magnifying glass to open the modal, then click the radio button next to Select the Suggestion__c record that started your process.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Leave No criteria—just update the records! selected.&lt;/li&gt;
&lt;li&gt;Set the new field value.

&lt;ul&gt;
&lt;li&gt;Field: Status&lt;/li&gt;
&lt;li&gt;Type: Picklist&lt;/li&gt;
&lt;li&gt;Value: Implemented&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/PB1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Process Builder2&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click Save&lt;/li&gt;
&lt;li&gt;In the upper right corner, click Activate and then click Confirm.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-4-try-out-the-app-1&#34;&gt;Step 4: Try Out the App&lt;/h4&gt;

&lt;p&gt;Your business logic fires whenever a record is created or updated from the browser or the mobile app. Go back to a Suggestion record and enter a date in the Implemented Date field. Try a date in the future. Did the system block you from saving? Now try today’s date. The Status field should change to Implemented.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step4.4.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Suggestion Locker Rooms&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;resources-3&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/point_click_business_logic/formula_fields&#34;&gt;Formulas and Validations &amp;gt; Using Formula Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/point_click_business_logic/validation_rules&#34;&gt;Formulas &amp;amp; Validations &amp;gt; Creating Validation Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/business_process_automation/process_builder&#34;&gt;Process Automation &amp;gt; Automating Processes with the Lightning Process Builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;creating-reports-and-dashboards&#34;&gt;Creating Reports and Dashboards&lt;/h1&gt;

&lt;h3 id=&#34;what-you-ll-do-4&#34;&gt;What You’ll Do&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple tabular report to list open suggestions.&lt;/li&gt;
&lt;li&gt;Create a summary report with a report chart.&lt;/li&gt;
&lt;li&gt;Create a simple dashboard based on the summary report.&lt;/li&gt;
&lt;li&gt;Try the reports and dashboards in the Salesforce1 Mobile app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Suggestion Box app you created with the App Quick Start wizard includes a Reports tab and a Dashboards tab, where you can create, edit, and run reports and dashboards. These features make an app more useful by providing the business with valuable insights.&lt;/p&gt;

&lt;h4 id=&#34;step-1-create-a-tabular-report&#34;&gt;Step 1: Create a Tabular Report&lt;/h4&gt;

&lt;p&gt;Let’s start with a simple tabular report to show the number of suggestions received and the status of each one. A tabular report presents data in simple rows and columns, much like a spreadsheet. You can use it to show column summaries, like sum, average, maximum, and minimum.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On the Reports tab, click New Report.&lt;/li&gt;
&lt;li&gt;In the Quick Find box, enter Suggestions. In the Other Reports folder, choose Suggestions.&lt;/li&gt;
&lt;li&gt;Click Create.&lt;/li&gt;
&lt;li&gt;In the Report Builder, notice that the Suggestion Name field is already on the report. In the preview screen, you can see the sample Suggestion records you created in previous steps.&lt;/li&gt;
&lt;li&gt;From the Fields pane, in the Suggestion: Info folder, drag Status and Number of Days Open onto the preview and drop them to the right of the Suggestion Name field.&lt;/li&gt;
&lt;li&gt;Set a row limit for this report so that it doesn’t get out of hand. From the Add drop-down menu next to Filters, chooseRow Limit.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step5.1.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Unsaved Report1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Click OK to accept the default 10-row limit.&lt;/li&gt;
&lt;li&gt;To make sure that you’re viewing only suggestions that still need to be implemented, click Add next to Filters and set the filter to Status Not Equal To Implemented. Click OK.&lt;/li&gt;
&lt;li&gt;Click the Dashboard Settings button at the top.&lt;/li&gt;
&lt;li&gt;For the Name field, choose Status.&lt;/li&gt;
&lt;li&gt;For the Value field, choose Number of Days Open and then click OK. (Steps 9, 10, and 11 are needed only if the tabular report is used in a dashboard.)&lt;/li&gt;
&lt;li&gt;Click Save, and name your report Suggestions: Status of Open Suggestions.&lt;/li&gt;
&lt;li&gt;In the Report Folder drop-down list, select Unfiled Public Reports so that everyone can access it. (If you don’t want this report to be accessible to everyone, create a folder and give different people different levels of access to it.)&lt;/li&gt;
&lt;li&gt;Click Save and Run Report.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step5.1.2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Unsaved Report2&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-2-create-a-summary-report-and-a-report-chart&#34;&gt;Step 2: Create a Summary Report and a Report Chart&lt;/h4&gt;

&lt;p&gt;It’s often a good idea to give users a visual way to understand the data in your report. Tabular reports don’t include charts, so let’s copy the report and make a Summary report. Then, you can add a chart.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the Report Results view of the Suggestions: Status of Open Suggestions report, click on the drop down on the right and choose Clone&lt;/li&gt;
&lt;li&gt;Type Suggestions: By Status as the report name&lt;/li&gt;
&lt;li&gt;Choose the Make Public radio button&lt;/li&gt;
&lt;li&gt;Click Save&lt;/li&gt;
&lt;li&gt;Click Edit&lt;/li&gt;
&lt;li&gt;Click Tabular Format and choose Summary. If presented with a warning message, click Yes to proceed.&lt;/li&gt;
&lt;li&gt;Drag the Status field column to the shaded area labeled Drop a field here to create a grouping.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step5.2.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Unsaved Report3&#34; /&gt;&lt;/li&gt;
&lt;li&gt;From the Report Results view, click on the Pie button to Add chart to this report&lt;/li&gt;
&lt;li&gt;Click on the gear icon and choose Doughnut chart&lt;/li&gt;
&lt;li&gt;In the Chart Title type Suggestions Status and in Value drop down, choose Record Count.&lt;/li&gt;
&lt;li&gt;Click OK, and then Save.&lt;/li&gt;
&lt;li&gt;Click Run Report.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The doughnut chart displays above the report results and shows the total number of open suggestions by status.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step5.2.2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Unsaved Report4&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-3-create-a-dashboard&#34;&gt;Step 3: Create a Dashboard&lt;/h4&gt;

&lt;p&gt;Dashboards in Salesforce are like a dashboard in your car, showing you important information at a glance. Dashboards can show data in charts, gauges, tables, metrics, or other formats (using a Visualforce page). Dashboards are powered by reports.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the Dashboard tab and click on  New Dashboard&lt;/li&gt;
&lt;li&gt;Type the Dashboard Name as Suggestions Dashboard and save it on the default Private folder&lt;/li&gt;
&lt;li&gt;Click on the + Add button at the top right to add a component
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step5.3.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Dashboard1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;In the Report Search, look for Suggestions: By Status&lt;/li&gt;
&lt;li&gt;Choose the doughnut chart and edit the Title as Suggestions By Status&lt;/li&gt;
&lt;li&gt;Click Add&lt;/li&gt;
&lt;li&gt;Click Done.&lt;/li&gt;
&lt;li&gt;The Dashboard appears as
&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step5.3.2.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Dashboard2&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;step-4-try-out-the-mobile-app&#34;&gt;Step 4: Try Out the Mobile App&lt;/h4&gt;

&lt;p&gt;You are now a mobile app developer! This is a simple but complete app, and from here you can continue to add functionality or build another app with these skills. Let&amp;rsquo;s see how these reports and dashboards look in the Salesforce1 Mobile app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the &lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.6.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Icon&#34; /&gt; icon to open the left navigation bar.&lt;/li&gt;
&lt;li&gt;Scroll down and click Reports in the Apps section to display the reports that you recently viewed.&lt;/li&gt;
&lt;li&gt;Click either of the reports that you created.&lt;/li&gt;
&lt;li&gt;Sort the columns, and click a row in the report to test its functionality.&lt;/li&gt;
&lt;li&gt;Now let’s try the dashboard. Click the &lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Stepn1.3.6.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Icon&#34; /&gt; icon to open the left navigation bar.&lt;/li&gt;
&lt;li&gt;Click Dashboards to display the dashboards that you recently viewed.&lt;/li&gt;
&lt;li&gt;Click the Suggestions Dashboard. You should see something like this:
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/suggestion-box/images/Step5.4.1.png?raw=true&#34; alt=&#34;alt text&#34; title=&#34;Suggestion Dashboard&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;You did it! You built a simple suggestions management app, all without a single line of code! You started by creating the simple data model and the default user interface for managing suggestions. You then customized the user experience on the browser and mobile app by using drag-and-drop editors. Next, you added business logic with the formula language and process builder. Finally, you created some reports and dashboards so that you could monitor and analyze your business data. You can continue your journey and dive deeper by following the links in the Resources sections of this project.&lt;/p&gt;

&lt;h4 id=&#34;resources-4&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/reports_dashboards/reports_dashboards_overview&#34;&gt;Reports &amp;amp; Dashboards &amp;gt; Getting Started with Reports and Dashboards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/reports_dashboards/reports_dashboards_getting_started&#34;&gt;Reports &amp;amp; Dashboards &amp;gt; Using the Report Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/reports_dashboards/reports_dashboards_report_types&#34;&gt;Reports &amp;amp; Dashboards &amp;gt; Using Report Formats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.salesforce.com/trailhead/reports_dashboards/reports_dashboards_visualizing_data&#34;&gt;Reports &amp;amp; Dashboards &amp;gt; Visualizing Your Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dreamforce 2017</title>
      <link>http://www.sfdcworkshop.com/home/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/home/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sfdcworkshop.com/minihacks&#34;&gt;MiniHacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Dreamforce 2017 MiniHacks</title>
      <link>http://www.sfdcworkshop.com/minihacks/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/minihacks/</guid>
      <description>

&lt;h3 id=&#34;challenges&#34;&gt;Challenges&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-1-point-and-click-app&#34;&gt;CHALLENGE 1 : Point and Click App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-2-lightning-app-builder-and-dreamhouse&#34;&gt;CHALLENGE 2: Lightning App Builder and Dreamhouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-3-voting-survey-with-no-code&#34;&gt;CHALLENGE 3: Voting Survey with no Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-4-lightning-bmi-calculator&#34;&gt;CHALLENGE 4: Lightning BMI Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-5-lightning-data-service-no-apex&#34;&gt;CHALLENGE 5: Lightning Data Service, No Apex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-6-heroku-app-in-action&#34;&gt;CHALLENGE 6: Heroku App in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-7-hello-einstein-search-visually&#34;&gt;CHALLENGE 7: Hello Einstein, Search Visually&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-8-searchable-contact-list&#34;&gt;CHALLENGE 8: Searchable Contact List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-9-slds-component&#34;&gt;CHALLENGE 9: SLDS Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge-10-deploy-docusign-for-salesforce-to-get-agreements-sent-out-and-signed-faster&#34;&gt;CHALLENGE 10: Deploy DocuSign for Salesforce to get agreements sent out and signed faster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;challenge-1-point-and-click-app&#34;&gt;CHALLENGE 1 : Point and Click App&lt;/h4&gt;

&lt;p&gt;We need to help an amusement park manage its rides, shows, customers and discounts. Help them by creating a Resort application with automated approval processes, using configuration only.&lt;/p&gt;

&lt;h5 id=&#34;requirements&#34;&gt;REQUIREMENTS&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for the Lightning Experience and requires a Force.com Developer Edition: &lt;a href=&#34;https://sforce.co/2tnM5a7&#34;&gt;https://sforce.co/2tnM5a7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;No code is allowed. This includes Apex, Visualforce, Lightning Components, custom JavaScript buttons, or integration with external systems.&lt;/li&gt;
&lt;li&gt;Show object should contain Name, Date, Price, Total Seats and Booked Seats. Each show or ride is limited by number of seats (total seats).&lt;/li&gt;
&lt;li&gt;Ticket object should capture Customer Name, Number of Adult seats, Number of Child seats and Discount. Price must be derived from the Show object. The Total Cost should be automatically calculated. If the seats are filled, no additional bookings are to be allowed.&lt;/li&gt;
&lt;li&gt;Discounts are permitted for the following scenarios:

&lt;ol&gt;
&lt;li&gt;Child seat has a default discount of 25%.&lt;/li&gt;
&lt;li&gt;Special discount is permitted through the discount field. If this discount is more than 30%, approval from the manager is required. Record should be locked while under approval process&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-2-lightning-app-builder-and-dreamhouse&#34;&gt;CHALLENGE 2: Lightning App Builder and Dreamhouse&lt;/h4&gt;

&lt;p&gt;Lightning App Builder lets admins build with components. You can combine existing standard and custom components to create a single Lightning page.&lt;/p&gt;

&lt;h5 id=&#34;requirements-1&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for the Lightning Experience UI and requires a Force.com Developer Edition: &lt;a href=&#34;https://sforce.co/2tnM5a7&#34;&gt;https://sforce.co/2tnM5a7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install the Dreamhouse Sample app (Refer to the instructions at &lt;a href=&#34;http://www.dreamhouseapp.io&#34;&gt;http://www.dreamhouseapp.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a Lightning Page called Property View using Lightning App Builder, and add it to the Dreamhouse App.&lt;/li&gt;
&lt;li&gt;Property View Page should contain Property Tile List, Price Range, Property Summary, Map, Smart Price Calculator and Days on Market Components.&lt;/li&gt;
&lt;li&gt;Add Path Component to Property Detail page and configure process with key fields for each stage of the Deal.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-1&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-3-voting-survey-with-no-code&#34;&gt;CHALLENGE 3: Voting Survey with no Code&lt;/h4&gt;

&lt;p&gt;Help a social organization conduct a Survey to choose their leader based on certain qualities. Create a visual flow of the survey using Cloud Flow Designer.&lt;/p&gt;

&lt;h5 id=&#34;requirements-2&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for Lightning Experience and requires a Force.com Developer Edition: &lt;a href=&#34;https://sforce.co/2tnM5a7&#34;&gt;https://sforce.co/2tnM5a7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No code is allowed. This includes Apex, Visualforce, Lightning Components, custom JavaScript buttons, or integration with external systems.&lt;/li&gt;
&lt;li&gt;Contestant object should contain Name, rollup field for Vote Count and Score which is a rollup summary of ratings from all the votes.&lt;/li&gt;
&lt;li&gt;Vote object which is child of Contestant object should capture rating(1 to 10) for each of the qualities e.g. Honesty, Delegation, Commitment and Leadership etc. A field called score should automatically calculate the score of all qualities.&lt;/li&gt;
&lt;li&gt;Voting has to be done through a survey[o] via a tab in Lightning Experience using visual flow. This flow should have the Lightning look and feel.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-2&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-4-lightning-bmi-calculator&#34;&gt;CHALLENGE 4: Lightning BMI Calculator&lt;/h4&gt;

&lt;p&gt;Implement a BMI Calculator Lightning Component using Base Lightning Components.&lt;/p&gt;

&lt;h5 id=&#34;requirements-3&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for Lightning Experience and requires a Force.com Developer Edition: &lt;a href=&#34;https://sforce.co/2tnM5a7&#34;&gt;https://sforce.co/2tnM5a7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a simple component using Base Lightning Components to accept Height and Weight. It should Calculate and display BMI on click of a button.&lt;/li&gt;
&lt;li&gt;You may refer to &lt;a href=&#34;http://sforce.co/2stOMud&#34;&gt;http://sforce.co/2stOMud&lt;/a&gt; for help on Base Lightning Components.&lt;/li&gt;
&lt;li&gt;Show this component working in Lightning Experience.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-3&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-5-lightning-data-service-no-apex&#34;&gt;CHALLENGE 5: Lightning Data Service, No Apex&lt;/h4&gt;

&lt;p&gt;Make it simple with Lightning Data Service. Avoid using a custom server side Apex controller to load, create, edit, or delete a record in your Lightning component.&lt;/p&gt;

&lt;h5 id=&#34;requirements-4&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for Lightning Experience and requires a Force.com Developer Edition: &lt;a href=&#34;https://sforce.co/2tnM5a7&#34;&gt;https://sforce.co/2tnM5a7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Lightning Component code. No Apex Code is allowed.&lt;/li&gt;
&lt;li&gt;Implement a Component and add it to Contact detail page. The Component should display Contact Name, Phone and Email Values of the record.&lt;/li&gt;
&lt;li&gt;Refer to the documentation and examples at &lt;a href=&#34;http://sforce.co/2sBWZML&#34;&gt;http://sforce.co/2sBWZML&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-4&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-6-heroku-app-in-action&#34;&gt;CHALLENGE 6: Heroku App in Action&lt;/h4&gt;

&lt;p&gt;Deploy an app on Heroku that uses Heroku Connect to display the accounts from Salesforce in your application.&lt;/p&gt;

&lt;h5 id=&#34;requirements-5&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge requires a Force.com Developer Edition: &lt;a href=&#34;http://sforce.co/2tnM5a7&#34;&gt;http://sforce.co/2tnM5a7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Refer to the blog: &lt;a href=&#34;http://bit.ly/HerokuHack&#34;&gt;http://bit.ly/HerokuHack&lt;/a&gt; for instructions on installing, running the app locally and deploying to Heroku.&lt;/li&gt;
&lt;li&gt;Modify the app such that it can display Accounts from Salesforce&lt;/li&gt;
&lt;li&gt;Redeploy the changes on Heroku.&lt;/li&gt;
&lt;li&gt;You can refer to the trailhead Heroku Connect Module for help: &lt;a href=&#34;http://sforce.co/2sbVsud&#34;&gt;http://sforce.co/2sbVsud&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-5&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-7-hello-einstein-search-visually&#34;&gt;CHALLENGE 7: Hello Einstein, Search Visually&lt;/h4&gt;

&lt;p&gt;A picture is worth a thousand words. Search with images using Einstein Vision and Lightning bots. Configure the Dreamhouse app for your customers to support searches for similar properties by uploading images of their choice.&lt;/p&gt;

&lt;h5 id=&#34;requirements-6&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for Lightning Experience and requires a Force.com Developer Edition: &lt;a href=&#34;https://sforce.co/2tnM5a7&#34;&gt;https://sforce.co/2tnM5a7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This challenge requires a Einstein Vision Account. You can sign up at bit.ly/2s2xbsd.&lt;/li&gt;
&lt;li&gt;Install the Dreamhouse sample app (Refer to instructions at &lt;a href=&#34;http://bit.ly/2stG4fB&#34;&gt;http://bit.ly/2stG4fB&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Configure the image based search component and bot to search for a house by typing the command ‘search houses like this’ and upload any house image of your choice. You may refer to &lt;a href=&#34;http://sforce.co/2sc5j2Z&#34;&gt;http://sforce.co/2sc5j2Z&lt;/a&gt; for help.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-6&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-8-searchable-contact-list&#34;&gt;CHALLENGE 8: Searchable Contact List&lt;/h4&gt;

&lt;p&gt;A Searchable Contact List Component for each Account record is required for an Organization. Help the organization by creating a Lightning Component.&lt;/p&gt;

&lt;h5 id=&#34;requirements-7&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for Lightning Experience and requires a Force.com Developer Edition: &lt;a href=&#34;http://sforce.co/2tnM5a7&#34;&gt;http://sforce.co/2tnM5a7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a Searchable Contact List Component which has to be added to the Account Detail Page.&lt;/li&gt;
&lt;li&gt;The Component should display all the Contacts of the Account. It should contain a Search Filter to search for a specific Contact by name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-7&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-9-slds-component&#34;&gt;CHALLENGE 9: SLDS Component&lt;/h4&gt;

&lt;p&gt;Enrich Visualforce pages with Lightning Experience by creating Visualforce Components using Salesforce Lightning Design System (SLDS).&lt;/p&gt;

&lt;h5 id=&#34;requirements-8&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge requires a Force.com Developer Edition: sforce.co/2tnM5a7.&lt;/li&gt;
&lt;li&gt;Install this package which contains the VisualForce Page with more instructions: &lt;a href=&#34;https://login.salesforce.com/packaging/installPackage.apexp?p0=04tf4000001MFb5&#34;&gt;https://login.salesforce.com/packaging/installPackage.apexp?p0=04tf4000001MFb5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implement a Visualforce component with SLDS and replace the standard component in the Visualforce page.&lt;/li&gt;
&lt;li&gt;Your new SLDS visualforce component should work like standard component.&lt;/li&gt;
&lt;li&gt;You may refer to &lt;a href=&#34;https://trailhead.salesforce.com/trails/lex_dev/modules/lex_dev_visualforce&#34;&gt;https://trailhead.salesforce.com/trails/lex_dev/modules/lex_dev_visualforce&lt;/a&gt; for help.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;demo-your-solution-8&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the Mini Hack Basin to verify your results with a tech staffer.&lt;/p&gt;

&lt;h4 id=&#34;challenge-10-deploy-docusign-for-salesforce-to-get-agreements-sent-out-and-signed-faster&#34;&gt;CHALLENGE 10: Deploy DocuSign for Salesforce to get agreements sent out and signed faster.&lt;/h4&gt;

&lt;p&gt;Difficuly : Intermediate&lt;/p&gt;

&lt;h5 id=&#34;requirements-9&#34;&gt;Requirements:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;This challenge is for Lightning Experience and requires a Force.com Developer Edition&lt;/li&gt;
&lt;li&gt;Install and configure the DocuSign for Salesforce managed package from AppExchange: &lt;a href=&#34;http://bit.ly/2xFgzLt&#34;&gt;http://bit.ly/2xFgzLt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add the DocuSign Sending Lightning component to your Lightning Page: &lt;a href=&#34;http://bit.ly/2yg0lrH&#34;&gt;http://bit.ly/2yg0lrH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send and sign a document with “Send with DocuSign” Lightning component: &lt;a href=&#34;http://sforce.co/2xEwt3C&#34;&gt;http://sforce.co/2xEwt3C&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Refer to additional information at &lt;a href=&#34;http://bit.ly/2xFqq3W&#34;&gt;http://bit.ly/2xFqq3W&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;features-to-be-used&#34;&gt;Features to be used:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Lightning App Builder&lt;/li&gt;
&lt;li&gt;DocuSign for Salesforce&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;demo-your-solution-9&#34;&gt;Demo Your Solution:&lt;/h5&gt;

&lt;p&gt;Visit the DocuSign Booth in the Developer Forest to verify your results with a DocuSign team member&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heroku Connect</title>
      <link>http://www.sfdcworkshop.com/workshop/heroku-connect/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/heroku-connect/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sfdcworkshop.com/workshop/heroku-connect/hc-py-flask&#34;&gt;Build a Heroku Connect App to sync Heroku with Salesforce using Python Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sfdcworkshop.com/workshop/heroku-connect/hc-java-spring-jdbc&#34;&gt;Build a Heroku Connect App to sync Heroku with Salesforce using Java Spring with JDBC Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Heroku Connect : Sync Heroku app with Salesforce using Java Spring and JDBC</title>
      <link>http://www.sfdcworkshop.com/workshop/heroku-connect/hc-java-spring-jdbc/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/heroku-connect/hc-java-spring-jdbc/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clone-the-source-code&#34;&gt;Clone the Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#heroku-login&#34;&gt;Heroku Login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#about-the-application&#34;&gt;About the Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-contacts-implementation&#34;&gt;Get Contacts Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-contact-form&#34;&gt;Create Contact Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complete-code-listing-for-the-controller&#34;&gt;Complete code Listing for the Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compile-the-app-locally&#34;&gt;Compile the App Locally&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#procfile&#34;&gt;Procfile&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploying-to-heroku&#34;&gt;Deploying to Heroku&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#add-postgresql-add-on&#34;&gt;Add PostgreSQL Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-heroku-connect-add-on&#34;&gt;Add Heroku Connect Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;configure-heroku-connect-add-on&#34;&gt;Configure Heroku Connect Add-On&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#connect-to-postgresql-from-local-instance&#34;&gt;Connect to PostgreSQL from Local Instance&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#open-the-remote-app-in-heroku&#34;&gt;Open the Remote App in Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#show-contacts&#34;&gt;Show Contacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-contact&#34;&gt;Create Contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this workshop you will learn how to run a &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; with PostgreSQL JDBC driver which connects to the database populated by Heroku Connect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/heroku-connect-spring-boot-flow.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Figure 1 : Heroku-Connect Spring Boot Data flow&lt;/p&gt;

&lt;p&gt;Figure 1 show the  how HerokuConnect Add-On interacts with Heroku PostgreSQL and Force.com behind the scenes.&lt;/p&gt;

&lt;p&gt;Note : Make sure you have Java 1.8, &lt;a href=&#34;https://github.com/dbhasuru/df16workshops/blob/master/content/workshop/heroku-connect/hc-java-spring-jdbc/MavenInstallation.md&#34;&gt;Maven 3.3.3&lt;/a&gt; installed and &lt;a href=&#34;https://toolbelt.heroku.com/&#34;&gt;Heroku Toolbelt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using a Spring Boot Sample app available at &lt;a href=&#34;https://github.com/rajdeepd/heroku-connect-spring-boot-jdbc-rw&#34;&gt;heroku connect spring boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This app has four rest endpoints&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@app.route(&#39;/&#39;)&lt;/code&gt; shows the home page of the App&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@app.route(&#39;/contacts&#39;)&lt;/code&gt; which fetches list of contacts from Postgres table &lt;code&gt;salesforce&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@app.route(&#39;/createcontactform&#39;)&lt;/code&gt; shows the Create Contact Form&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@app.route(&#39;/createcontact&#39;)&lt;/code&gt; Called by the Create Contact Form to insert form data into PostgreSQL &lt;code&gt;salesforce.contact&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This workshop assumes you have following setup&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://signup.heroku.com/&#34;&gt;Heroku Account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-command-line#download-and-install&#34;&gt;Heroku CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;Java 1.8&lt;/a&gt; or above&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://maven.apache.org/download.cgi&#34;&gt;Maven 3.3.9&lt;/a&gt; or above&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.salesforce.com/signup&#34;&gt;Salesforce Developer Edition Account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;clone-the-source-code&#34;&gt;Clone the Source Code&lt;/h2&gt;

&lt;p&gt;Clone the source code using &lt;code&gt;git clone&lt;/code&gt; and change into the cloned project directory &lt;code&gt;heroku-connect-spring-boot&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git clone https://github.com/rajdeepd/heroku-connect-spring-boot-jdbc-rw
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;cd &lt;/span&gt;heroku-connect-spring-boot-jdbc-rw
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;heroku-login&#34;&gt;Heroku Login&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;   &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku login
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;

&lt;h5 id=&#34;note-for-information-only&#34;&gt;Note : For information only&lt;/h5&gt;

&lt;p&gt;This is a basic Spring-boot app which uses PostgrSQL JDBC driver to connect to the PostgreSQL database and return the list of contacts. It uses Thymeleaf to render the HTML template.&lt;/p&gt;

&lt;p&gt;Structure of the App is Listed below&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  |-- pom.xml
  |-- Procfile
  |-- README.md
  |-- src
  |   `-- main
  |       |-- java
  |       |   `-- com
  |       |       `-- example
  |       |           |-- Contact.java
  |       |           `-- HerokuConnectApplication.java
  |       |-- resources
  |       |   |-- application.properties
  |       |   `-- templates
  |       |       |-- contact.html
  |       |       |-- createcontact.html
  |       |       |-- home.html
  |       |       `-- result.html
  |       `-- webapp
  |           `-- assets
  |               |-- css
  |               |   |-- bootstrap.css
  |               |   `-- style.css
  |               `-- js
  |                   `-- bootstrap.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;about-the-application&#34;&gt;About the Application&lt;/h2&gt;

&lt;p&gt;Application is based on Spring MVC Architecture.&lt;/p&gt;

&lt;p&gt;The Spring Web model-view-controller (MVC) framework uses  DispatcherServlet that dispatches requests to handlers. It has configurable handler mappings, view resolution, locale and theme resolution.
The default handler is based on the &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@RequestMapping&lt;/code&gt; annotations, offering a wide range of handling methods.&lt;/p&gt;

&lt;p&gt;Controllers provide access to the application behavior  defined through a service interface. Controllers interpret user input and transform it into a model that is represented to the user by the view (Thymeleaf in our case). Spring implements a controller in a abstract way, which enables developers to create a wide variety of controllers.&lt;/p&gt;

&lt;p&gt;Since Spring 2.5  annotation-based programming model for MVC controllers that uses annotations &lt;code&gt;@RequestMapping&lt;/code&gt;, &lt;code&gt;@RequestParam&lt;/code&gt;, &lt;code&gt;@ModelAttribute&lt;/code&gt; has been introduced.&lt;/p&gt;

&lt;p&gt;Controllers implemented using this style do not have to extend specific base classes or implement specific interfaces
In our example we are using &lt;code&gt;@Controller&lt;/code&gt; annotation to define the Controller and &lt;code&gt;@RequestMapping&lt;/code&gt; to map rest endpoints to implementation methods.&lt;/p&gt;

&lt;p&gt;Spring Boot developers always annotate the main class with &lt;code&gt;@Configuration&lt;/code&gt;, &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; and &lt;code&gt;@ComponentScan&lt;/code&gt;. These annotations are frequently used together Spring Boot provides a convenient &lt;code&gt;@SpringBootApplication&lt;/code&gt; alternative.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation is equivalent to using @Configuration, @EnableAutoConfiguration and @ComponentScan with their default attributes.  This is the annotation we are using in our controller listed below.&lt;/p&gt;

&lt;h3 id=&#34;view-implementation-with-thymeleaf-templates&#34;&gt;View implementation with Thymeleaf Templates&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thymeleaf.org/&#34;&gt;Thymeleaf&lt;/a&gt;  is a  template engine capable of processing and generating HTML, XML etc. It can work both in web and non-web environments. It is better suited for serving the view layer of web applications.
It provides an optional integration with Spring MVC, so that it can be used  as a complete substitute of JSP.&lt;/p&gt;

&lt;p&gt;We are using Thymeleaf templates for rendering the Contacts sent by the controller.&lt;/p&gt;

&lt;h3 id=&#34;controller&#34;&gt;Controller&lt;/h3&gt;

&lt;h5 id=&#34;note-for-information-only-1&#34;&gt;Note : For information only&lt;/h5&gt;

&lt;p&gt;Main Controller of the App is &lt;code&gt;HerokuConnectApplication&lt;/code&gt; class which provides implementation of four rest Endpoints.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Controller&lt;/span&gt;
  &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@SpringBootApplication&lt;/span&gt;
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;HerokuConnectApplication&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Following four &lt;code&gt;@RequestMappings&lt;/code&gt; have been implemented in the Controller &lt;code&gt;HerokuConnectApplication&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #06287e&#34;&gt;home&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Model model&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/contacts&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #06287e&#34;&gt;contacts&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Model model&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;....&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/createcontact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; method&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #06287e&#34;&gt;createContact&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ModelAttribute&lt;/span&gt; Contact contact&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Model model&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;....&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/createcontactform&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #06287e&#34;&gt;createContactForm&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Model model&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;....&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before we look at the implementation of contacts() method, following code listing shows how the JDBC connection is obtained based on DATABASE_URL environment variable. This can be setup for a local PostgreSQL, or a PostgreSQL instance running in Heroku as shown in sections later in this tutorial.&lt;/p&gt;

&lt;p&gt;In Heroku dynos running on Heroku this environment variable is setup automatically&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; Connection &lt;span style=&#34;color: #06287e&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;throws&lt;/span&gt; URISyntaxException&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; SQLException &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    URI dbUri &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; URI&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getenv&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;DATABASE_URL&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;

    String username &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dbUri&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getUserInfo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    String password &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dbUri&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getUserInfo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
    String dbUrl &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;jdbc:postgresql://&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; dbUri&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getHost&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; dbUri&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getPort&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; dbUri&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getPath&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;?sslmode=require&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; DriverManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;dbUrl&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; username&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; password&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;get-contacts-implementation&#34;&gt;Get Contacts Implementation&lt;/h2&gt;

&lt;h5 id=&#34;note-for-information-only-2&#34;&gt;Note : For information only&lt;/h5&gt;

&lt;p&gt;In the implementation of &lt;code&gt;contacts(Model model)&lt;/code&gt; method following steps are followed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the database &lt;code&gt;connection&lt;/code&gt; using &lt;code&gt;getConnection()&lt;/code&gt; method in the controller&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;Statement&lt;/code&gt; object &lt;code&gt;stmt&lt;/code&gt;
&lt;code&gt;java
Statement stmt = connection.createStatement();
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create the sql String to be executed which in our case is
&lt;code&gt;java
sql = &amp;quot;SELECT id, sfid,  firstname, lastname, name, email FROM salesforce.contact&amp;quot;;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute the statement &lt;code&gt;stmt&lt;/code&gt;
&lt;code&gt;java
ResultSet rs = stmt.executeQuery(sql);
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Populate List of &lt;code&gt;com.example.Contact&lt;/code&gt; Object for each contact and add to Model model.
Code listing for &lt;code&gt;Contact.&lt;/code&gt; class
&lt;a href=&#34;https://github.com/rajdeepd/heroku-connect-spring-boot/blob/master/src/main/java/com/example/Contact.java&#34;&gt;Contact&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;return the &lt;code&gt;contact.html&lt;/code&gt; Thymeleaf template&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;addAttribute&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;contacts&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; contacts&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/contacts&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
 &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #06287e&#34;&gt;contacts&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Model model&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
          Connection connection &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getConnection&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
          Statement stmt &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;createStatement&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
          String sql&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
          sql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SELECT id, sfid,  firstname, lastname, name, email&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot; FROM salesforce.contact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
          ResultSet rs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; stmt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
              
          List contacts &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
          &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Extract data from result set&lt;/span&gt;
          &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
              &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
              String sfid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;sfid&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
              String name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
              String first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;firstname&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
              String last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;lastname&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
              String email &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
              contacts&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Contact&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; sfid&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; first&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; last&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; email&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
          model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;addAttribute&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;contacts&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; contacts&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
          &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; e&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thymeleaf template &lt;code&gt;contact.html&lt;/code&gt; below uses variable set in Model to retrieve and display list of contacts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;th&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;Id&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;SFID&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;First&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;Last&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Email&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:each=&amp;quot;contact : ${contacts}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:text=&amp;quot;${contact.id}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:text=&amp;quot;${contact.sfid}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:text=&amp;quot;${contact.first}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:text=&amp;quot;${contact.last}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:text=&amp;quot;${contact.email}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;create-contact-form&#34;&gt;Create Contact Form&lt;/h2&gt;

&lt;h5 id=&#34;note-for-information-only-3&#34;&gt;Note : For information only&lt;/h5&gt;

&lt;p&gt;This implementation returns the &lt;code&gt;createcontact.html&lt;/code&gt; Thymeleaf template Listed below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/createcontactform&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #06287e&#34;&gt;createContactForm&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Model model&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;addAttribute&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Contact&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;createcontact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create Contact Form html&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #007020&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Heroku Connect Spring Boot Demo&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;http-equiv=&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;content=&amp;quot;text/html; charset=UTF-8&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;link&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;rel=&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;../assets/css/bootstrap.css&amp;quot;&lt;/span&gt; 
          &lt;span style=&#34;color: #4070a0&#34;&gt;th:href=&amp;quot;@{/assets/css/bootstrap.css}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;link&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;rel=&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;../assets/css/thymeleaf-demo.css&amp;quot;&lt;/span&gt; 
          &lt;span style=&#34;color: #4070a0&#34;&gt;th:href=&amp;quot;@{/assets/css/style.css}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!--&amp;lt;div style=&amp;quot;margin-top: 20px;margin-left: 50px&amp;quot;&amp;gt;--&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; Contacts : &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;action=&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:action=&amp;quot;@{/createcontact}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:object=&amp;quot;${contact}&amp;quot;&lt;/span&gt; 
          &lt;span style=&#34;color: #4070a0&#34;&gt;method=&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;table&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;border=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;colspan=&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;align=&amp;quot;center&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Create Contact&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/h4&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;First Name:&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;first&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:field=&amp;quot;*{first}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Last Name:&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;last&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:field=&amp;quot;*{last}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Email:&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;th:field=&amp;quot;*{email}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;Submit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;create-contact-rest-endpoint&#34;&gt;Create Contact Rest Endpoint&lt;/h3&gt;

&lt;h5 id=&#34;note-for-information-only-4&#34;&gt;Note : For information only&lt;/h5&gt;

&lt;p&gt;Listing below inserts the Contact data in the Database using JDBC.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Form parameters are passed from the Form into Contact object and extracted from there.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;     model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;addAttribute&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
     &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
     String first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getFirst&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
     String last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getLast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
     String email &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;JDBC Connection object is fetched, JDBC statement is created and executed&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;     Connection connection &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getConnection&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
     Statement stmt &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;createStatement&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
     String sql&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
     sql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; 
        &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;insert into salesforce.contact(firstname, lastname, email) values &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;(&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; first  &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;#39;, &amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot; &amp;#39;,&amp;#39; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; email &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
     &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; stmt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;executeUpdate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;        &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/createcontact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; method&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #06287e&#34;&gt;createContact&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@ModelAttribute&lt;/span&gt; Contact contact&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; 
          Model model&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;addAttribute&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        String first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getFirst&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        String last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getLast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        String email &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; contact&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            Connection connection &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getConnection&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
            Statement stmt &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;createStatement&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
            String sql&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
            sql &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; 
              &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;insert into salesforce.contact(firstname, lastname, email) &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; 
              &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;values &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;
              &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;(&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; first  &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;#39;, &amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot; &amp;#39;,&amp;#39; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; email &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
            System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; stmt&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;executeUpdate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;execute update returned: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; result&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
            e&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
            model&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;addAttribute&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Exception&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Result html page returned just shows the inserted record&lt;/p&gt;

&lt;h2 id=&#34;complete-code-listing-for-the-controller&#34;&gt;Complete code Listing for the Controller&lt;/h2&gt;

&lt;p&gt;Complete Code Listing can be found at &lt;a href=&#34;https://github.com/rajdeepd/heroku-connect-spring-boot-jdbc-rw/blob/master/src/main/java/com/example/HerokuConnectApplication.java&#34;&gt;HerokuConnectApplication&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;compile-the-app-locally&#34;&gt;Compile the App Locally&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Execute the following commands to compile and build the jar file
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;mvn compile
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;mvn package
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Run the app using the following command locally&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;mvn spring-boot:run
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your app should now be running on &lt;a href=&#34;https://localhost:8080&#34;&gt;localhost:8080&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;procfile&#34;&gt;Procfile&lt;/h3&gt;

&lt;h5 id=&#34;note-for-information-only-5&#34;&gt;Note : For information only&lt;/h5&gt;

&lt;p&gt;There is already a Procfile which tells the Heroku what kind of Dyno is required and the source for the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  web: java -Dserver.port=$PORT -jar  target/heroku-connect-spring-boot-jdbc-rw-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deploying-to-heroku&#34;&gt;Deploying to Heroku&lt;/h2&gt;

&lt;p&gt;Before moving forward, get signup for a Heroku account &lt;a href=&#34;https://signup.heroku.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku login       
  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku create
  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The App is deployed but still needs PostgreSQL to be configured along with Heroku Connect.&lt;/p&gt;

&lt;h3 id=&#34;add-postgresql-add-on&#34;&gt;Add PostgreSQL Add-On&lt;/h3&gt;

&lt;p&gt;Add Postgress Add-On as shown below. This step is optional and is required if heroku-postgresql addon is not already configured by heroku for your app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons:create heroku-postgresql:hobby-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;add-heroku-connect-add-on&#34;&gt;Add Heroku Connect Add-On&lt;/h3&gt;

&lt;p&gt;Configure Heroku Connect Add-On. Command below configures Heroku-Connect Add-On to the application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons:create herokuconnect
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;configure-heroku-connect-add-on&#34;&gt;Configure Heroku Connect Add-On&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Setup Connection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/setup-connection1.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter Schema Name : This is the schema name under which database will be created.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/enter-schemaname2.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Trigger OAuth&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/trigger-oauth3.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter Salesforce.com developer account credentials&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/oauth4.png&#34; width=&#34;40%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create Mappings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/create-mappings5.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create Mappings Contacts : Choose the fields in Salesforce Schema which need to be mapped to Postgres Database in the application. Make sure you select the Writable checkbox. Select the fields FirstName, LastName, Email, Name and Phone number.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/create-mapping-contacts6.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Explore Contacts in the Dashboard&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;images/contacts-explorer7.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;connect-to-postgresql-from-local-instance&#34;&gt;Connect to PostgreSQL from Local Instance&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Find the DATABASE_URL of the remote database using the following command
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;   &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku config
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will see the output as shown below, we have removed the actual values of &lt;code&gt;user_name&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;database_name&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  heroku &lt;span style=&#34;color: #bb60d5&#34;&gt;config&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; rd-spring-boot-hc-1 Config Vars
  DATABASE_URL:      postgres://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@ec2-107-20-136-89.compute-1.amazonaws.com:5432/&amp;lt;database_name&amp;gt;
  HEROKUCONNECT_URL: DATABASE_URL:salesforce
&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Set the DATABASE_URL environment variable&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;  export DATABASE_URL=postgres://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@ec2-107-20-136-89.compute-1.amazonaws.com:5432/&amp;lt;database_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Run the app locally again&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;  $ mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; :Make sure you kill previous instances of spring-boot instances started&lt;/p&gt;

&lt;p&gt;The App opens up in the default route &lt;code&gt;/&lt;/code&gt; with the following view&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/1.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Browse to URL &lt;code&gt;http://localhost:8080/contacts&lt;/code&gt; to see the list of contact names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/2.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Browse to URL &lt;code&gt;http://localhost:8080/createcontactform&lt;/code&gt; to get the Create Contact Form. Filling this and submitting results in data being inserted into PostgreSQL and Salesforce&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/3.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;open-the-remote-app-in-heroku&#34;&gt;Open the Remote App in Heroku&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku open
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The App opens up in the default route &lt;code&gt;/&lt;/code&gt; with the following view&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/4.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;show-contacts&#34;&gt;Show Contacts&lt;/h3&gt;

&lt;p&gt;Browse to URL &lt;code&gt;http://{your-app-name}.herokuapp.com/contacts&lt;/code&gt; to see the list of contact names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/5.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;create-contact&#34;&gt;Create Contact&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;images/6.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this workshop we learnt how to configure a &lt;strong&gt;Pre-existing&lt;/strong&gt; Spring Boot Application to work with Heroku Connect. We used PostgreSQL JDBC driver for talking to the PostgreSQL database deployed on Heroku.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heroku Connect : Sync Heroku app with Salesforce using Python Flask</title>
      <link>http://www.sfdcworkshop.com/workshop/heroku-connect/hc-py-flask/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/heroku-connect/hc-py-flask/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clone-the-source-code&#34;&gt;Clone the Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#heroku-login&#34;&gt;Heroku Login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#requirements-file&#34;&gt;Requirements File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#procfile&#34;&gt;Procfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#db-initialization&#34;&gt;DB Initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flask-controller&#34;&gt;Flask Controller&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#list-contacts&#34;&gt;List Contacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-contacts&#34;&gt;Create Contacts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploying-to-heroku&#34;&gt;Deploying to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-postgresql-add-on&#34;&gt;Add PostgreSQL Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-heroku-connect-add-on&#34;&gt;Add Heroku Connect Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configure-heroku-connect-add-on&#34;&gt;Configure Heroku Connect Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#home-page&#34;&gt;Home Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#contact-list&#34;&gt;Contact List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-new-contact&#34;&gt;Create a New Contact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optional-step-show-contacts-locally&#34;&gt;Optional Step Show Contacts Locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This workshop shows how to &lt;strong&gt;Create&lt;/strong&gt; and &lt;strong&gt;Run&lt;/strong&gt; a Python app with psycopg2 which uses PostgreSQL based Heroku Connect&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/heroku-connect-flow-flask-psycopg2.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Figure 1 show how the HerokuConnect Add-On interacts with Heroku Postgres and force.com behind the scenes.
Make sure you have &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt; installed.  Also, install the &lt;a href=&#34;https://toolbelt.heroku.com/&#34;&gt;Heroku Toolbelt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using a basic Flask app available at flask_psycopg2_v2&lt;/p&gt;

&lt;p&gt;This app has four rest endpoints&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/&#39;) which displays Hello world
@app.route(&#39;/contacts&#39;) which fetches list of contacts from Postgres table salesforce.contact
@app.route(&#39;/create_contact&#39;, methods=[&#39;POST&#39;,&#39;GET&#39;]) which creates a new contact
@app.route(&#39;/contactform&#39;) which serves an HTML Form for entering new contact details
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This workshop assumes you have following setup&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://signup.heroku.com/&#34;&gt;Heroku Login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-command-line#download-and-install&#34;&gt;Heroku CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.salesforce.com/signup&#34;&gt;Salesforce Developer Edition Account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;clone-the-source-code&#34;&gt;Clone the Source Code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git clone https://github.com/rajdeepd/flask-psycopg2-v2
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;heroku-login&#34;&gt;Heroku Login&lt;/h2&gt;

&lt;p&gt;First download CLI, install it and run the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku login
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;requirements-file&#34;&gt;Requirements File&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note : This section is for information only&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice that the Requirements file already exists, this will be used by Heroku to setup the dynos&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;cat requirements.txt
    &lt;span style=&#34;color: #bb60d5&#34;&gt;Flask&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;0.10.1
    &lt;span style=&#34;color: #bb60d5&#34;&gt;gunicorn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;19.3.0
    &lt;span style=&#34;color: #bb60d5&#34;&gt;itsdangerous&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;0.24
    &lt;span style=&#34;color: #bb60d5&#34;&gt;Jinja2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;2.8
    &lt;span style=&#34;color: #bb60d5&#34;&gt;MarkupSafe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;0.23
    &lt;span style=&#34;color: #bb60d5&#34;&gt;psycopg2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;2.6.1
    &lt;span style=&#34;color: #bb60d5&#34;&gt;Werkzeug&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;0.11
    &lt;span style=&#34;color: #bb60d5&#34;&gt;wheel&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;0.24.0
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;procfile&#34;&gt;Procfile&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note : This section is for information only&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is already a Procfile which tells the Heroku what kind of Dyno is required and the source for the application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    web: gunicorn app:app --log-file -
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;db-initialization&#34;&gt;DB Initialization&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note : This section is for information only&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will parsing the DATABASE_URL environment variable to connect to PostgreSQL database. The PostgreSQL Python driver is already configured in the requirements file.&lt;/p&gt;

&lt;p&gt;Steps are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Parse DATABASE_URL into variable &lt;code&gt;url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a connection string &lt;code&gt;db&lt;/code&gt; from the parsed &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a Database connection &lt;code&gt;conn&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Open a Database cursor &lt;code&gt;cur&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; urlparse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;urlparse(os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;))
db &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;dbname=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; user=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; password=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; host=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; (url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path[&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;:], 
     url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;username, url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;password, url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;hostname)
schema &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;schema.sql&amp;quot;&lt;/span&gt;
conn &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; psycopg2&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;connect(db)
cur &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cursor()
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;flask-controller&#34;&gt;Flask Controller&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note : This section is for information only&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.py&lt;/code&gt; is the main controller for our applications and code listing below shows the implementation of various use cases&lt;/p&gt;

&lt;h3 id=&#34;list-contacts&#34;&gt;List Contacts&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/contacts&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;contacts&lt;/span&gt;():
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt;:
        cur&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&amp;quot;SELECT name from salesforce.contact&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;)
        rows &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fetchall()
        response &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        my_list &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; rows:
            my_list&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(row[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;])

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;template.html&amp;#39;&lt;/span&gt;,  results&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;my_list)
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt;(e)
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; []
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;create-contacts&#34;&gt;Create Contacts&lt;/h3&gt;

&lt;h4 id=&#34;implementation-of-createcontactform-endpoint&#34;&gt;Implementation of &lt;code&gt;/createcontactform&lt;/code&gt; endpoint&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/contactform&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;contactform&lt;/span&gt;():
   &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;contactform.html&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;implementation-of-create-contact-endpoint&#34;&gt;Implementation of &lt;code&gt;/create_contact&lt;/code&gt; endpoint.&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/create_contact&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;create_contact&lt;/span&gt;():

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;method &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;:
            first_name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;first-name&amp;quot;&lt;/span&gt;]
            last_name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;last-name&amp;quot;&lt;/span&gt;]
            email &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;]

            app&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;info(first_name)
            statement &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;insert into salesforce.contact(firstname, &lt;/span&gt;
                        lastname, email) values (&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;quot; &lt;/span&gt;&lt;span style=&#34;color: #4070a0; font-weight: bold&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #4070a0&#34;&gt;                + first_name + &amp;quot;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;quot; + last_name + &amp;quot;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;quot; + email + &amp;quot;&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&lt;/span&gt;
            cur&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;execute(statement)
            conn&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;commit()
            errors &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;result.html&amp;#39;&lt;/span&gt;, errors&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;errors, 
                                   firstname&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;first_name,
                                   lastname&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;last_name)
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt;(e)
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; []
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;deploying-to-heroku&#34;&gt;Deploying to Heroku&lt;/h2&gt;

&lt;p&gt;Before moving on, create a &lt;a href=&#34;https://signup.heroku.com/&#34;&gt;Heroku&lt;/a&gt; account and run &lt;code&gt;$ heroku login&lt;/code&gt; command to login to your created heroku account.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku create
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git push heroku master
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku open
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;add-postgresql-add-on&#34;&gt;Add PostgreSQL Add-On&lt;/h2&gt;

&lt;p&gt;Add Postgress Add-On as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons:create heroku-postgresql:hobby-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;add-heroku-connect-add-on&#34;&gt;Add Heroku Connect Add-On&lt;/h2&gt;

&lt;p&gt;Configure Heroku Connect Add-On. Command below configures Herok-Connect Add-On to the application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons:create herokuconnect
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configure-heroku-connect-add-on&#34;&gt;Configure Heroku Connect Add-On&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup Connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/setup-connection.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter Schema Name : This is the schema name underwhich database will be created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/enter-schemaname.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trigger OAuth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/trigger-oauth.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter Salesforce.com developer account credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/sfaccountdetails.png&#34; width=&#34;40%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Mappings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/create-mappings.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Mappings Contacts : Choose the fields in Salesforce Schema which need to be mapped to Postgres Database in the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/create-mapping-contacts.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write Enable&lt;/strong&gt; : Make sure you enable &lt;code&gt;Write to Salesforce any updates to your database&lt;/code&gt; check box&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Explore Contacts in the Dashboard&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/contacts-explorer.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;home-page&#34;&gt;Home Page&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;images/contacts-home.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;contact-list&#34;&gt;Contact List&lt;/h2&gt;

&lt;p&gt;Browse to URL &lt;code&gt;http://{your-app-name}.herokuapp.com/contacts&lt;/code&gt; to see the list of contact names.
  &lt;img src=&#34;images/contacts-list.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-contact&#34;&gt;Create a New Contact&lt;/h2&gt;

&lt;p&gt;Browse to URL &lt;code&gt;http://{your-app-name}.herokuapp.com/createcontactform&lt;/code&gt; to see the list of contact names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/create-contacts.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;optional-step-show-contacts-locally&#34;&gt;Optional Step Show Contacts Locally&lt;/h2&gt;

&lt;h3 id=&#34;prerequisites-1&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pip.pypa.io/en/stable/installing/&#34;&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtualenv.pypa.io/en/stable/&#34;&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PostgreSQL client (Optional if you want to run the application locally)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Virtual Environment&lt;/p&gt;

&lt;p&gt;Go to the application Folder &lt;code&gt;flask-psycopg2-sample&lt;/code&gt; and install a virtual environment in it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;cd &lt;/span&gt;flask-psycopg2-v2
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;virtualenv venv
&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;source &lt;/span&gt;venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Dependencies&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;pip install flask gunicorn psycopg2
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the DATABASE_URL in the local environment&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku &lt;span style=&#34;color: #bb60d5&#34;&gt;config&lt;/span&gt;

  &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; fast-sands-40695 Config Vars
  DATABASE_URL:      postgres://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ipaddress&amp;gt;.compute-1.amazonaws.com:5432/&amp;lt;database_name&amp;gt;
  HEROKUCONNECT_URL: DATABASE_URL:salesforce
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Export DATABASE_URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    
 &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;DATABASE_URL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;postgres://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ipaddress&amp;gt;.compute-1.amazonaws.com:5432/db
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open the following URL &lt;code&gt;http://localhost:5000/contacts&lt;/code&gt; you should be able see the contacts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the app using the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your app should now be running on &lt;a href=&#34;http://localhost:5000&#34;&gt;localhost:5000&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this workshop we learnt how to configure a Python Flask Application to work with Heroku Connect. We used Psycopg2 driver for talking to the PostgreSQL database deployed on Heroku.&lt;/p&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;execute_using_pycharm&#34;&gt;Execute using PyCharm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heroku Connect : Sync Heroku app with Salesforce using Python Flask</title>
      <link>http://www.sfdcworkshop.com/workshop/heroku-connect/hc-py-flask/index_v1/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/heroku-connect/hc-py-flask/index_v1/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-virtual-environment&#34;&gt;Install Virtual Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-simple-flask-app&#34;&gt;Creating a Simple Flask App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#initialize-git&#34;&gt;Initialize Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-requirements-file&#34;&gt;Create a Requirements File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-procfile&#34;&gt;Create a Procfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploying-to-heroku&#34;&gt;Deploying to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-postgresql-add-on&#34;&gt;Add PostgreSQL Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-heroku-connect-add-on&#34;&gt;Add Heroku Connect Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configure-heroku-connect-add-on&#34;&gt;Configure Heroku Connect Add-On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-code-for-contacts-endpoint&#34;&gt;Add Code for contacts endpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-jinja-template&#34;&gt;Add Jinja Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#update-python-packages&#34;&gt;Update python packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-requirements-file&#34;&gt;Add Requirements file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#update-changes-in-heroku&#34;&gt;Update Changes in Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#show-contacts&#34;&gt;Show Contacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#show-contacts-locally&#34;&gt;Show Contacts Locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#executing-using-pycharm&#34;&gt;Executing using PyCharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This workshop shows how to &lt;strong&gt;Create&lt;/strong&gt; and &lt;strong&gt;Run&lt;/strong&gt; a Python app with psycopg2 which uses PostgreSQL based Heroku Connect&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/heroku-connect-flow-flask-psycopg2.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Figure 1 show how the HerokuConnect Add-On interacts with Heroku Postgres and force.com behind the scenes.
Make sure you have &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt; installed.  Also, install the &lt;a href=&#34;https://toolbelt.heroku.com/&#34;&gt;Heroku Toolbelt&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-virtual-environment&#34;&gt;Install Virtual Environment&lt;/h2&gt;

&lt;p&gt;Locally, create a folder &lt;code&gt;flask-psycopg2-sample&lt;/code&gt; and install a virtual environment in it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;mkdir flask-psycopg2-sample
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;cd &lt;/span&gt;flask-psycopg2-sample
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;virtualenv venv
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;source &lt;/span&gt;venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install Dependencies&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;pip install flask gunicorn
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;creating-a-simple-flask-app&#34;&gt;Creating a Simple Flask App&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First create a base Flask app with simple REST endpoint/ in a file and name it as &lt;code&gt;app.py&lt;/code&gt; in the folder created above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;      
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;flask&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; Flask
app &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Flask(__name__)

&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;hello_world&lt;/span&gt;():
  &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
  app&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run()
      
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the app using the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your app should now be running on &lt;a href=&#34;http://localhost:5000&#34;&gt;localhost:5000&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;initialize-git&#34;&gt;Initialize Git&lt;/h2&gt;

&lt;p&gt;Initialize the git repository as shown by commands below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git init
  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git add .
  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git commit -m &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;create-a-requirements-file&#34;&gt;Create a Requirements File&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;create-a-procfile&#34;&gt;Create a Procfile&lt;/h2&gt;

&lt;p&gt;Create a file name &lt;code&gt;Procfile&lt;/code&gt; in the root of the app and add following content. This specifies that the app uses a &lt;code&gt;web&lt;/code&gt; dyno with &lt;code&gt;gunicorn&lt;/code&gt; as http server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  web: gunicorn app:app --log-file -
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;deploying-to-heroku&#34;&gt;Deploying to Heroku&lt;/h2&gt;

&lt;p&gt;Before moving on, create a &lt;a href=&#34;https://signup.heroku.com/&#34;&gt;Heroku&lt;/a&gt; account and run &lt;code&gt;$ heroku login&lt;/code&gt; command to login to your created heroku account.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku create
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git push heroku master
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku open
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;add-postgresql-add-on&#34;&gt;Add PostgreSQL Add-On&lt;/h2&gt;

&lt;p&gt;Add Postgress Add-On as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons:create heroku-postgresql:hobby-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;add-heroku-connect-add-on&#34;&gt;Add Heroku Connect Add-On&lt;/h2&gt;

&lt;p&gt;Configure Heroku Connect Add-On. Command below configures Herok-Connect Add-On to the application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku addons:create herokuconnect
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configure-heroku-connect-add-on&#34;&gt;Configure Heroku Connect Add-On&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup Connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/setup-connection.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter Schema Name : This is the schema name underwhich database will be created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/enter-schemaname.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trigger OAuth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/trigger-oauth.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter Salesforce.com developer account credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/sfaccountdetails.png&#34; width=&#34;40%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Mappings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/create-mappings.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Mappings Contacts : Choose the fields in Salesforce Schema which need to be mapped to Postgres Database in the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/create-mapping-contacts.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explore Contacts in the Dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/contacts-explorer.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-code-for-contacts-endpoint&#34;&gt;Add Code for contacts endpoint&lt;/h2&gt;

&lt;p&gt;First Add following lines which configure Connection object conn to PostgreSQL Database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; urlparse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;urlparse(os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;))
    db &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;dbname=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; user=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; password=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; host=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; (url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path[&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;:], 
          url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;username, url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;password, url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;hostname)
    schema &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;schema.sql&amp;quot;&lt;/span&gt;
    conn &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; psycopg2&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;connect(db)
    cur &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cursor()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add code for the Getting the Contacts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/contacts&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;contacts&lt;/span&gt;():
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt;:
          cur&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&amp;quot;SELECT name from salesforce.contact&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;)
          rows &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fetchall()
          response &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
          my_list &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
          &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; rows:
              my_list&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(row[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;])
          &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;template.html&amp;#39;&lt;/span&gt;,  results&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;my_list)
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
          &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt; e
          &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; []
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Complete Code listing&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;os&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;psycopg2&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;flask&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; Flask, render_template
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;urlparse&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;os.path&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; exists
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;os&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;import&lt;/span&gt; makedirs
    
    url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; urlparse&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;urlparse(os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;))
    db &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;dbname=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; user=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; password=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; host=&lt;/span&gt;&lt;span style=&#34;color: #70a0d0; font-style: italic&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt; &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; (url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path[&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;:], 
                       url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;username, url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;password, url&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;hostname)
    schema &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;schema.sql&amp;quot;&lt;/span&gt;
    conn &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; psycopg2&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;connect(db)
    
    cur &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cursor()
    
    app &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Flask(__name__)
    
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;hello&lt;/span&gt;():
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;
    
    &lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;/contacts&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;contacts&lt;/span&gt;():
      &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt;:
        cur&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;&amp;quot;&amp;quot;SELECT name from salesforce.contact&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;)
        rows &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cur&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fetchall()
        response &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        my_list &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; rows:
          my_list&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(row[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;template.html&amp;#39;&lt;/span&gt;,  results&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;my_list)
      &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;print&lt;/span&gt; e
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; []
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
      app&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run()
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;add-jinja-template&#34;&gt;Add Jinja Template&lt;/h2&gt;

&lt;p&gt;The code shown in previous section uses template.html file which is a Jinja template. Add this file under folder templates&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Flask Template Example&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;name=&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;link&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;href=&amp;quot;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&amp;quot;&lt;/span&gt; 
                    &lt;span style=&#34;color: #4070a0&#34;&gt;rel=&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;media=&amp;quot;screen&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;style &lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;.container&lt;/span&gt; {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;500px&lt;/span&gt;;
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;padding-top&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;100px&lt;/span&gt;;
            }
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;class=&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Contacts:&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            {% for r in results %}
            &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{r}}&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {% endfor %}
          &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;http://code.jquery.com/jquery-1.10.2.min.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;update-python-packages&#34;&gt;Update python packages&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;     &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;pip install psycopg2
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;add-requirements-file&#34;&gt;Add Requirements file&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;     &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;update-changes-in-heroku&#34;&gt;Update Changes in Heroku&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git add .
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git commit -m &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Added code for contacts&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open the App again in Heroku&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku open
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;show-contacts&#34;&gt;Show Contacts&lt;/h2&gt;

&lt;p&gt;Browse to URL &lt;code&gt;http://{your-app-name}.herokuapp.com/contacts&lt;/code&gt; to see the list of contact names.
  &lt;img src=&#34;images/show-contacts.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;show-contacts-locally&#34;&gt;Show Contacts Locally&lt;/h2&gt;

&lt;p&gt;Configure the DATABASE_URL in the local environment&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;heroku &lt;span style=&#34;color: #bb60d5&#34;&gt;config&lt;/span&gt;

    &lt;span style=&#34;color: #666666&#34;&gt;===&lt;/span&gt; fast-sands-40695 Config Vars
    DATABASE_URL:      postgres://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ipaddress&amp;gt;.compute-1.amazonaws.com:5432/&amp;lt;database_name&amp;gt;
    HEROKUCONNECT_URL: DATABASE_URL:salesforce
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Export DATABASE_URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #bb60d5&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #bb60d5&#34;&gt;DATABASE_URL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;postgres://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ipaddress&amp;gt;.compute-1.amazonaws.com:5432/&amp;lt;database_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open the following URL :code:&lt;code&gt;http://localhost:5000/contacts&lt;/code&gt; you should be able see the contacts.&lt;/p&gt;

&lt;h2 id=&#34;executing-using-pycharm&#34;&gt;Executing using PyCharm&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install the &lt;a href=&#34;https://www.jetbrains.com/pycharm/download/&#34;&gt;Pycharm&lt;/a&gt;. And add your directory as a project to PyCharm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/pycharm1.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set the Environment variable as &lt;code&gt;DATABASE_URL=postgres://&amp;lt;user_name&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ipaddress&amp;gt;.compute-1.amazonaws.com:5432/&amp;lt;database_name&amp;gt;&lt;/code&gt; by following the path File &amp;gt; Default Settings
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/pycharm3.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;app.py&lt;/code&gt; and run the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/pycharm2.png&#34; width=&#34;90%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Open the following URL &lt;code&gt;http://localhost:5000/contacts&lt;/code&gt; you should be able see the contacts.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this workshop we learnt how to configure a Python Flask Application to work with Heroku Connect. We used Psycopg2 driver for talking to the PostgreSQL database deployed on Heroku.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PredictionIO </title>
      <link>http://www.sfdcworkshop.com/workshop/prediction-io/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/prediction-io/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;recommendation_engine&#34;&gt;Recommendation Engine with PredictionIO &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;text_classification&#34;&gt;Text Classification with PredictionIO &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rapid Prototyping with the Design System UI Kit and Starter Kit</title>
      <link>http://www.sfdcworkshop.com/workshop/rapid-prototyping-with-slds/</link>
      <pubDate>Fri, 29 Jul 2016 16:18:23 +0530</pubDate>
      
      <guid>http://www.sfdcworkshop.com/workshop/rapid-prototyping-with-slds/</guid>
      <description>

&lt;h2 id=&#34;what-you-ll-learn&#34;&gt;What you’ll learn&lt;/h2&gt;

&lt;p&gt;By the end of this workshop, you&amp;rsquo;ll know how to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get your idea into a static prototype in Sketch&lt;/li&gt;
&lt;li&gt;Create a prototype of your idea using the &lt;a href=&#34;https://www.lightningdesignsystem.com&#34;&gt;Lightning Design System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Iterate on that prototype directly &lt;em&gt;in&lt;/em&gt; the browser&lt;/li&gt;
&lt;li&gt;Deploy the result for free to Heroku in a few clicks only&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a nutshell: getting high definition concepts in front of stakeholders and customers at minimum cost.&lt;/p&gt;

&lt;h2 id=&#34;why-rapid-prototyping&#34;&gt;Why Rapid Prototyping?&lt;/h2&gt;

&lt;p&gt;Rapid prototyping is a very effective technique for testing new ideas and iterating on them. Experimenting and refining concepts lead to a better user experience for your customers and force.com users.&lt;/p&gt;

&lt;p&gt;The closer to reality and the more interactive a prototype is, the better. But developing a whole web solution &amp;ldquo;just for research&amp;rdquo; can be costly. That&amp;rsquo;s where rapid prototyping comes into play! Both the &lt;a href=&#34;https://github.com/salesforce-ux/design-system-ui-kit&#34;&gt;Design System UI Kit&lt;/a&gt; and the &lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit&#34;&gt;Design System Starter Kit&lt;/a&gt; are tools that help reducing that cost while allowing you to build high quality prototypes that look and feel like the Lightning Experience.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.uxmatters.com/mt/archives/2013/03/are-rapid-prototyping-lean-ux-and-agile-development-good-for-user-experience.php&#34;&gt;Read more about the benefits of rapid prototyping, Lean UX and agile development on user experience&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A recent browser (Chrome or Firefox recommended)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; 4.2 or up&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;nice-to-have&#34;&gt;Nice to have&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; account&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not familiar with the command line? Use &lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt; instead!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;optional&#34;&gt;Optional&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; account (free)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sketchapp.com/&#34;&gt;Sketch&lt;/a&gt; 39 or up&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/salesforce-ux/design-system-ui-kit#salesforce-sans-fonts&#34;&gt;Salesforce Sans fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;what-is-the-design-system-starter-kit&#34;&gt;What is the Design System Starter Kit?&lt;/h2&gt;

&lt;p&gt;The starter kit is a rapid prototyping environment using the &lt;a href=&#34;https://www.lightningdesignsystem.com/&#34;&gt;Salesforce Lightning Design System&lt;/a&gt;, HTML, and &lt;a href=&#34;http://www.sass-lang.com/&#34;&gt;Sass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s built for designers, developers, and anyone who wants to build a prototype and dabbles in HTML.&lt;/p&gt;

&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;re going to download the starter kit, install dependencies, and run it locally.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork the starter kit

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://git.io/starter-kit&#34;&gt;https://git.io/starter-kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click the &amp;ldquo;Fork&amp;rdquo; button&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;In a terminal window, &lt;code&gt;cd&lt;/code&gt; into the directory where you&amp;rsquo;d like to clone the repository (e.g. &lt;code&gt;cd ~/Documents&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Clone your fork (&lt;code&gt;git clone https://github.com/[YOUR USERNAME]/design-system-starter-kit.git&lt;/code&gt; – or using the GUI of your choosing)&lt;/li&gt;
&lt;li&gt;Open the fork in a terminal (&lt;code&gt;cd path/to/design-system-starter-kit&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, follow the instructions below (also in the Quick Start section of the starter kit&amp;rsquo;s &lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit/#README&#34;&gt;README.md file&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;4-run-npm-install&#34;&gt;4. Run &lt;code&gt;npm install&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install npm dependencies, which include the latest public version of the Lightning Design System itself. Depending on the speed of your connection, this may take up to a few minutes.&lt;/p&gt;

&lt;h3 id=&#34;5-run-npm-run-dev&#34;&gt;5. Run &lt;code&gt;npm run dev&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; to start a local development server:

&lt;img class=&#34;pure-img&#34; src=&#34;images/npm-run-dev.png&#34; alt=&#34;&#34;&gt;
&lt;/p&gt;

&lt;p&gt;It will open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;, and you should see this something like this:&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;images/starter-kit-welcome-screen.png&#34; alt=&#34;&#34;&gt;


&lt;p&gt;⚠️ Don&amp;rsquo;t have git installed on your machine? &lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit/archive/master.zip&#34;&gt;Download the project as a zip archive&lt;/a&gt;. Note that you will only be able to run the starter kit locally.&lt;/p&gt;

&lt;h2 id=&#34;get-to-know-the-starter-kit&#34;&gt;Get to know the starter kit&lt;/h2&gt;

&lt;p&gt;Now you&amp;rsquo;ve installed the starter kit locally, let&amp;rsquo;s have a look at what&amp;rsquo;s inside.&lt;/p&gt;

&lt;p&gt;The kit&amp;rsquo;s file structure looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit/tree/master/assets/&#34;&gt;&lt;code&gt;/src/assets/&lt;/code&gt;&lt;/a&gt;: images, fonts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit/tree/master/scripts/&#34;&gt;&lt;code&gt;/src/scripts/&lt;/code&gt;&lt;/a&gt;: JavaScript files*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit/tree/master/styles/&#34;&gt;&lt;code&gt;/src/styles/&lt;/code&gt;&lt;/a&gt;: stylesheets (built using Sass)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit/tree/master/views/&#34;&gt;&lt;code&gt;/src/views/&lt;/code&gt;&lt;/a&gt;: markup and data for your pages and templates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;* the Lightning Design System does not include any JavaScript, but the starter kit bundles a few basic interactions for the most common components (e.g. tabs, dropdowns).&lt;/p&gt;

&lt;h2 id=&#34;let-s-build-our-first-page&#34;&gt;Let&amp;rsquo;s build our first page&lt;/h2&gt;

&lt;p&gt;Included in the starter kit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;: the welcome screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.html&lt;/code&gt;: an example that showcases the possibilities offered by the starter kit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blank.html&lt;/code&gt;: a blank template ready to host &lt;em&gt;your&lt;/em&gt; prototype!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workshop.html&lt;/code&gt;: a blank template ready to host &lt;em&gt;your&lt;/em&gt; prototype!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workshop-done.html&lt;/code&gt;: what your prototype should look like when you&amp;rsquo;ve completed this workshop!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The easiest way to throw a quick prototype together is to copy and paste ready-made components from the Lightning Design System website into &lt;code&gt;blank.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s copy-paste a related list component into &lt;code&gt;blank.html&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://www.lightningdesignsystem.com/&#34;&gt;https://www.lightningdesignsystem.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Search for &amp;ldquo;Related List With Table&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Follow the first search result&lt;/li&gt;
&lt;li&gt;Copy the code (below the component itself)&lt;/li&gt;
&lt;li&gt;Paste it into &lt;code&gt;blank.html&lt;/code&gt;, between &lt;code&gt;{% block content %}&lt;/code&gt; and &lt;code&gt;{% endblock %}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your browser should display this at &lt;a href=&#34;http://localhost:3000/blank.html&#34;&gt;http://localhost:3000/blank.html&lt;/a&gt;:&lt;/p&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;images/first-component-in.png&#34; alt=&#34;&#34;&gt;


&lt;h2 id=&#34;designing-in-the-browser&#34;&gt;Designing in the Browser&lt;/h2&gt;

&lt;h3 id=&#34;1-live-reload&#34;&gt;1. Live Reload&lt;/h3&gt;

&lt;p&gt;You may have seen it when you were adding a component to the markup: any change made to your prototype will display in the browser automatically, without you having to hit the &amp;ldquo;reload&amp;rdquo; button!&lt;/p&gt;

&lt;p&gt;Try for yourself:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;a href=&#34;http://localhost:3000/blank.html&#34;&gt;http://localhost:3000/blank.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;blank.html&lt;/code&gt;, find occurrences of &lt;code&gt;Contacts (will truncate)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace with &lt;code&gt;Any text you want!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Admire the page as it updates itself with the new text (see animation below)!&lt;/li&gt;
&lt;/ol&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;images/livereload.gif&#34; alt=&#34;&#34;&gt;


&lt;p&gt;Feel free to add more components to the page and go crazy! You&amp;rsquo;ll see the results appear instantly in the browser. Oh… and one more thing: &lt;em&gt;all&lt;/em&gt; browsers and devices connected to your local development environment will reload at the same time!&lt;/p&gt;

&lt;h3 id=&#34;2-directly-from-chrome&#34;&gt;2. Directly from Chrome&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Inspect any element on the page (&lt;strong&gt;right click, inspect element&lt;/strong&gt;), this will open the Chrome DevTools&lt;/li&gt;
&lt;li&gt;In DevTools, go to the &lt;strong&gt;Sources&lt;/strong&gt; tab&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Right-Click&lt;/strong&gt; anywhere in the left pane and select &lt;strong&gt;Add folder to workspace&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Find the design-system-starter-kit directory&lt;/strong&gt; (where it was cloned)&lt;/li&gt;
&lt;li&gt;Hit &lt;strong&gt;Select&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Allow&lt;/strong&gt; to give the DevTools access to your drive&lt;/li&gt;
&lt;/ol&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;images/add-folder-to-workspace.gif&#34; alt=&#34;&#34;&gt;


&lt;p&gt;Congrats, you now have access to your directory structure from within Chrome!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what you can do:&lt;/p&gt;

&lt;h4 id=&#34;editing-pages-in-the-browser&#34;&gt;Editing Pages in the Browser&lt;/h4&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;images/edit-in-browser.gif&#34; alt=&#34;&#34;&gt;


&lt;h4 id=&#34;editing-styles-in-the-browser&#34;&gt;Editing Styles in the Browser&lt;/h4&gt;


&lt;img class=&#34;pure-img&#34; src=&#34;images/edit-scss-in-browser.gif&#34; alt=&#34;&#34;&gt;


&lt;h2 id=&#34;from-sketch-to-the-browser&#34;&gt;From Sketch to the Browser&lt;/h2&gt;

&lt;p&gt;The static design you got in Sketch is in a pretty good shape and you know how to modify our prototype directly in the browser.&lt;/p&gt;

&lt;p&gt;Now is the moment you do some copy and pasting! Errr… some coding!&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;src/views&lt;/code&gt; directory, there&amp;rsquo;s a file called &lt;a href=&#34;https://github.com/salesforce-ux/design-system-starter-kit/blob/master/src/views/workshop.html&#34;&gt;&lt;strong&gt;&lt;code&gt;workshop.html&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. That&amp;rsquo;s where you&amp;rsquo;re going to make the magic happen.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;workshop.html&lt;/code&gt; in your browser, both in the developer tools and in &lt;a href=&#34;http://localhost:3000/workshop.html&#34;&gt;http://localhost:3000/workshop.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the HTML, you&amp;rsquo;ll see comments such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- PAGE HEADER: https://www.lightningdesignsystem.com/components/page-headers/#flavor-record-home --&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;&amp;lt;!-- /PAGE HEADER --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For every set of comments, head to the mentioned URL, copy the component&amp;rsquo;s code, and paste it in the page!&lt;/p&gt;

&lt;p&gt;After a while, your page should look pretty close to the static mockup, and you should have a solid prototype to show around!&lt;/p&gt;

&lt;h2 id=&#34;deploying-on-heroku&#34;&gt;Deploying on Heroku&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve pushed your work to your fork (&lt;code&gt;git push origin master&lt;/code&gt;), and now it&amp;rsquo;s now time to share your prototype with the world!&lt;/p&gt;

&lt;p&gt;Deploying your fork to Heroku is free and only takes 2 minutes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Head to your fork on GitHub&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Deploy to Heroku&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Submit&lt;/strong&gt; the form (&lt;strong&gt;Deploy for Free&lt;/strong&gt; button)&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;View&lt;/strong&gt; button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it! You can now share the link with the rest of the world!&lt;/p&gt;

&lt;h3 id=&#34;linking-to-github&#34;&gt;Linking to GitHub&lt;/h3&gt;

&lt;p&gt;Now that you’ve got your project deployed, what do you do with any changes thereafter?&lt;/p&gt;

&lt;p&gt;Heroku has a really cool feature that integrates with GitHub and does automatic deployments of every pushed commit:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/github-integration&#34;&gt;https://devcenter.heroku.com/articles/github-integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to “Manage App” › “Deploy” › “GitHub” › “Connect to GitHub” › Authorize if you need to › Search “design-system-starter-kit” and connect” › “Enable Automatic Deploys”&lt;/p&gt;

&lt;p&gt;This means that every time you push a change, your application will be deployed.&lt;/p&gt;

&lt;p&gt;So if you edit something and it gets committed and pushed to the master branch, a deploy hook will get triggered on Heroku and after a few minutes your application will automatically update!&lt;/p&gt;

&lt;p&gt;Refresh and check!&lt;/p&gt;

&lt;p&gt;Weeee!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;h3 id=&#34;issues-with-git&#34;&gt;Issues with Git&lt;/h3&gt;

&lt;p&gt;Not familiar with the command line? Use &lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt; instead!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how to clone a repository using GitHub Desktop: &lt;a href=&#34;https://help.github.com/desktop/guides/contributing/cloning-a-repository-from-github-desktop/&#34;&gt;https://help.github.com/desktop/guides/contributing/cloning-a-repository-from-github-desktop/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;permission-denied-publickey&#34;&gt;Permission denied (publickey)&lt;/h4&gt;

&lt;p&gt;This error happens when you&amp;rsquo;re trying to clone the repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Initialized empty Git repository in `/Users/username/Documents/design-system-starter-kit/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &amp;ldquo;Permission denied&amp;rdquo; error means that the server rejected your connection. There could be several reasons why, and the most common examples are explained below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/generating-an-ssh-key/&#34;&gt;Follow these instructions to set up your SSH keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/error-permission-denied-publickey/&#34;&gt;Error: Permission denied (publickey)&lt;/a&gt; on GitHub&amp;rsquo;s help pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;issues-with-node-js-and-npm&#34;&gt;Issues with Node.js and npm&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re encountering issues with Node.js modules, perform those actions in this order:&lt;/p&gt;

&lt;p&gt;Verify that you&amp;rsquo;re running Node.js 4 or up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node --version
# v4.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update npm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install npm --global
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Re-install dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd path/to/design-system-starter-kit
npm cache clear
rm -Rf node_modules
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-issues&#34;&gt;Other issues&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dropdowns and tabs don&amp;rsquo;t work in your browser?&lt;/strong&gt; The bundled JavaScript only works in the most recent browsers.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>